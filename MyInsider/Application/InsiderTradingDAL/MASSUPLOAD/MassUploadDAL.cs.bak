using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace InsiderTradingDAL
{
    public class MassUploadDAL
    {
        const string sLookupPrefix = "";

        #region GetDataTableName

        public string GetDataTableName(int i_nDataTableId, string sConnectionString)
        {
            List<MassUploadDTO> res = null;
            string sErrCode = string.Empty;
            #region Paramters
            int out_nReturnValue;
            int out_nSQLErrCode;
            string out_sSQLErrMessage;
            string sReturnDatatableName = "";
            #endregion Paramters
            try
            {
                var nReturnValue = new SqlParameter("@out_nReturnValue", System.Data.SqlDbType.Int);
                nReturnValue.Direction = System.Data.ParameterDirection.Output;
                //  nReturnValue.Value = 0;
                var nSQLErrCode = new SqlParameter("@out_nSQLErrCode", System.Data.SqlDbType.Int);
                nSQLErrCode.Direction = System.Data.ParameterDirection.Output;
                nSQLErrCode.Value = 0;
                var sSQLErrMessage = new SqlParameter("@out_sSQLErrMessage", System.Data.SqlDbType.VarChar);
                sSQLErrMessage.Direction = System.Data.ParameterDirection.Output;
                sSQLErrMessage.Size = 500;
                sSQLErrMessage.Value = "";
                var sDataTableName = new SqlParameter("@out_sDatatableName", System.Data.SqlDbType.VarChar);
                sDataTableName.Direction = System.Data.ParameterDirection.Output;
                sDataTableName.Size = 200;
                sDataTableName.Value = "";

                using (var db = new PetaPoco.Database(sConnectionString, "System.Data.SqlClient") { EnableAutoSelect = false })
                {
                    res = db.Query<MassUploadDTO>("exec st_com_MassUploadGetDataTableName @inp_iMassUploadDataTableId,@out_sDatatableName OUTPUT,@out_nReturnValue OUTPUT,@out_nSQLErrCode OUTPUT,@out_sSQLErrMessage OUTPUT",
                        new
                        {
                            inp_iMassUploadDataTableId = i_nDataTableId,
                            out_sDatatableName = sDataTableName,
                            out_nReturnValue = nReturnValue,
                            out_nSQLErrCode = nSQLErrCode,
                            out_sSQLErrMessage = sSQLErrMessage

                        }).ToList<MassUploadDTO>();
                    if (Convert.ToInt32(nReturnValue.Value) != 0)
                    {
                        Exception e = new Exception();
                        out_nReturnValue = Convert.ToInt32(nReturnValue.Value);
                        string sReturnValue = sLookupPrefix + out_nReturnValue;
                        e.Data[0] = sReturnValue;
                        if (nSQLErrCode.Value != System.DBNull.Value)
                        {
                            out_nSQLErrCode = Convert.ToInt32(nSQLErrCode.Value);
                            e.Data[1] = out_nSQLErrCode;
                        }
                        if (sSQLErrMessage.Value != System.DBNull.Value)
                        {
                            out_sSQLErrMessage = Convert.ToString(sSQLErrMessage.Value);
                            e.Data[2] = out_sSQLErrMessage;
                        }
                        Exception ex = new Exception(db.LastSQL.ToString(), e);
                        throw ex;
                    }

                }
                sReturnDatatableName = Convert.ToString(sDataTableName.Value);
            }
            catch (Exception exp)
            {
                throw exp;
            }
            return sReturnDatatableName;
            //return "MassEmployeeImportDataTable";
        }
        #endregion GetDataTableName

        #region GetMassUploadConfiguration
        /// <summary>
        ///  This function will return the Configuration for the MassUpload for given MassUploadId
        /// </summary>
        /// <param name="i_nMassUploadId">Mass Upload Id</param>
        /// <param name="sConnectionString">Database connection string</param>
        /// <returns>MassUploadDTO</returns>
        public IEnumerable<MassUploadDTO> GetMassUploadConfiguration(int i_nMassUploadId, string sConnectionString)
        {
            List<MassUploadDTO> res = null;
            string sErrCode = string.Empty;
            #region Paramters
            int out_nReturnValue;
            int out_nSQLErrCode;
            string out_sSQLErrMessage;
            #endregion Paramters
            try
            {

                var nReturnValue = new SqlParameter("@out_nReturnValue", System.Data.SqlDbType.Int);
                nReturnValue.Direction = System.Data.ParameterDirection.Output;
                //  nReturnValue.Value = 0;
                var nSQLErrCode = new SqlParameter("@out_nSQLErrCode", System.Data.SqlDbType.Int);
                nSQLErrCode.Direction = System.Data.ParameterDirection.Output;
                nSQLErrCode.Value = 0;
                var sSQLErrMessage = new SqlParameter("@out_sSQLErrMessage", System.Data.SqlDbType.VarChar);
                sSQLErrMessage.Direction = System.Data.ParameterDirection.Output;
                sSQLErrMessage.Value = "";

                using (var db = new PetaPoco.Database(sConnectionString, "System.Data.SqlClient") { EnableAutoSelect = false })
                {
                    res = db.Query<MassUploadDTO>("exec st_com_MassUploadGetconfiguration @inp_iMassUploadId,@out_nReturnValue OUTPUT,@out_nSQLErrCode OUTPUT,@out_sSQLErrMessage OUTPUT",
                        new
                        {
                            inp_iMassUploadId = i_nMassUploadId,
                            out_nReturnValue = nReturnValue,
                            out_nSQLErrCode = nSQLErrCode,
                            out_sSQLErrMessage = sSQLErrMessage

                        }).ToList<MassUploadDTO>();
                    if (Convert.ToInt32(nReturnValue.Value) != 0)
                    {
                        Exception e = new Exception();
                        out_nReturnValue = Convert.ToInt32(nReturnValue.Value);
                        string sReturnValue = sLookupPrefix + out_nReturnValue;
                        e.Data[0] = sReturnValue;
                        if (nSQLErrCode.Value != System.DBNull.Value)
                        {
                            out_nSQLErrCode = Convert.ToInt32(nSQLErrCode.Value);
                            e.Data[1] = out_nSQLErrCode;
                        }
                        if (sSQLErrMessage.Value != System.DBNull.Value)
                        {
                            out_sSQLErrMessage = Convert.ToString(sSQLErrMessage.Value);
                            e.Data[2] = out_sSQLErrMessage;
                        }
                        Exception ex = new Exception(db.LastSQL.ToString(), e);
                        throw ex;
                    }

                }
            }
            catch (Exception exp)
            {
                throw exp;
            }
            return res;
        }
        #endregion GetMassUploadConfiguration

        #region ExecuteMassUploadCall

        public void ExecuteMassUploadCall(DataTable i_objMassUploadDataTable,string i_sDataTableName, string i_sProcedureName, string i_sConnectionString,
            out List<string> o_objReturnIdList)
        {
            #region Paramters
            int out_nReturnValue;
            int out_nSQLErrCode;
            string out_sSQLErrMessage;
            bool bReturn = true;
            string out_sReturnBulkUserImport;
            #endregion Paramters
            o_objReturnIdList = new List<string>();
            try
            {
                #region Out Paramter
                var nout_nReturnValue = new SqlParameter("@out_nReturnValue", System.Data.SqlDbType.Int);
                nout_nReturnValue.Direction = System.Data.ParameterDirection.Output;
                //nout_nReturnValue.Value = 0;
                var nout_nSQLErrCode = new SqlParameter("@out_nSQLErrCode", System.Data.SqlDbType.Int);
                nout_nSQLErrCode.Direction = System.Data.ParameterDirection.Output;
                nout_nSQLErrCode.Value = 0;
                var sout_sSQLErrMessage = new SqlParameter("@out_sSQLErrMessage", System.Data.SqlDbType.NVarChar);
                sout_sSQLErrMessage.Direction = System.Data.ParameterDirection.Output;
                sout_sSQLErrMessage.Size = 500;
                sout_sSQLErrMessage.Value = string.Empty;
                var inp_tblBulkUserImport = new SqlParameter();
                inp_tblBulkUserImport.DbType = DbType.Object;
                inp_tblBulkUserImport.ParameterName = "@inp_tblBulkUserImport";
                inp_tblBulkUserImport.TypeName = "dbo." + i_sDataTableName;
                inp_tblBulkUserImport.SqlValue = i_objMassUploadDataTable;
                inp_tblBulkUserImport.SqlDbType = SqlDbType.Structured;

                var sout_sReturnBulkUserImport = new SqlParameter("@out_sReturnBulkUserImport", System.Data.SqlDbType.VarChar);
                sout_sReturnBulkUserImport.Direction = System.Data.ParameterDirection.Output;
                sout_sReturnBulkUserImport.Size = 8000;
                sout_sReturnBulkUserImport.Value = string.Empty;

                #endregion Out Paramter

                using (var db = new PetaPoco.Database(i_sConnectionString, "System.Data.SqlClient") { EnableAutoSelect = false })
                {
                    using (var scope = db.GetTransaction())
                    {
                        var res = db.Query<int>("exec " + i_sProcedureName + " @inp_tblBulkUserImport,@out_sReturnBulkUserImport OUTPUT,@out_nReturnValue OUTPUT,@out_nSQLErrCode OUTPUT,@out_sSQLErrMessage OUTPUT",
                        new
                        {
                            @inp_tblBulkUserImport = inp_tblBulkUserImport,
                            @out_sReturnBulkUserImport = sout_sReturnBulkUserImport,
                            @out_nReturnValue = nout_nReturnValue,
                            @out_nSQLErrCode = nout_nSQLErrCode,
                            @out_sSQLErrMessage = sout_sSQLErrMessage,

                        }).Single<int>();

                        #region Error Values
                        if (Convert.ToInt32(nout_nReturnValue.Value) != 0)
                        {
                        }
                        else
                        {
                            string sCreatedUsersIdInSequence = Convert.ToString(sout_sReturnBulkUserImport.Value);
                            string[] arrSplitResponse = sCreatedUsersIdInSequence.Split(new char[] { ',' });
                            List<string> lstResponses = arrSplitResponse.OfType<string>().ToList();
                            o_objReturnIdList = lstResponses;
                            scope.Complete();
                        }
                        #endregion Error Values
                    }
                }
            }
            catch (Exception exp)
            {
                throw exp;
            }
            finally
            {

            }
        }
        #endregion

    }
}
