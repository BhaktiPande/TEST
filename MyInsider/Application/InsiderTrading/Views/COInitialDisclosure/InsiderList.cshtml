@model InsiderTrading.Models.COInitialDisclosureModel
@{
    ViewBag.Title = "Initial Disclosures Status"@*InsiderTrading.Common.Common.getResource("")*@;
    var searchResult = Html.Raw(Json.Encode(TempData["SearchArray"]));
}

<section class="content-header">
    @Html.AntiForgeryToken()
    <h1> @InsiderTrading.Common.Common.getResource("dis_lbl_17001") </h1>
    @Html.Partial("~/Views/Common/InitialDisclosureOwnOS_Buttons.cshtml")
</section>

    <section class="content search" gridtype="@ViewBag.GridType">
        <button id="searchBtn" type="button" data-toggle="collapse" class="btn btn-success" data-target="#filter-panel">
            <i class="fa fa-search"> @InsiderTrading.Common.Common.getResource("com_btn_14005")</i>
        </button><div class="div-spacer"></div><br />
        <form role="form">
            <div id="filter-panel" class="collapse filter-panel">
                <div class="col-lg-12">
                    <div class="card panel-default">
                        <div class="card-body ">
                            <div class="row">
                                <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.EmployeeId)
                                        @Html.TextBoxFor(model => model.EmployeeId, new { @class = "form-control", gridtype = @ViewBag.GridType, id = "17" })
                                        @Html.ValidationMessageFor(model => model.EmployeeId)
                                    </div>
                                </div>
                                <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.EmployeeName)
                                        @Html.TextBoxFor(model => model.EmployeeName, new { @class = "form-control", gridtype = @ViewBag.GridType, id = "2" })
                                        @Html.ValidationMessageFor(model => model.EmployeeName)
                                    </div>
                                </div>
                                <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.DesignationId)
                                        @Html.TextBoxFor(model => model.DesignationId, new { @class = "form-control  ui-autocomplete", gridtype = @ViewBag.GridType, id = "3" })
                                        @Html.ValidationMessageFor(model => model.DesignationId)
                                    </div>
                                </div>
                                <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                    <div class="form-group">
                                        <div class="form-group" id="sandbox-container">
                                            @Html.LabelFor(model => model.EmailSentDate, new { @class = "Control-label" })
                                            @{
                                                string EmailSentDate = "";
                                                if (Model != null)
                                                {
                                                    EmailSentDate = InsiderTrading.Common.Common.ApplyFormatting(Model.EmailSentDate, InsiderTrading.Common.ConstEnum.DataFormatType.Date);
                                                }
                                            }
                                            <div class="input-group date">
                                                @Html.TextBoxFor(m => m.EmailSentDate, EmailSentDate, new { @class = "form-control", id = "4", gridtype = ViewBag.GridType })
                                                <span class="input-group-addon"><i class="icon icon-calender"></i></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                    <label>&nbsp;</label>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.HoldingDetailSubmission, new { @class = "Control-label" })
                                    </div>
                                </div>
                                <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                    <div class="form-group">
                                        <div class="form-group" id="sandbox-container">
                                            @Html.LabelFor(model => model.From, new { @class = "Control-label" })
                                            @{
                                                string HoldingDetailSubmissionFrom = "";
                                                if (Model != null)
                                                {
                                                    HoldingDetailSubmissionFrom = InsiderTrading.Common.Common.ApplyFormatting(Model.HoldingDetailSubmissionFrom, InsiderTrading.Common.ConstEnum.DataFormatType.Date);
                                                }
                                            }
                                            <div class="input-group date">
                                                @Html.TextBoxFor(m => m.HoldingDetailSubmissionFrom, HoldingDetailSubmissionFrom, new { @class = "form-control", id = "5", gridtype = ViewBag.GridType })
                                                <span class="input-group-addon"><i class="icon icon-calender"></i></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                    <div class="form-group">
                                        <div class="form-group" id="sandbox-container">
                                            @Html.LabelFor(model => model.To, new { @class = "Control-label" })
                                            @{
                                                string HoldingDetailSubmissionTo = "";
                                                if (Model != null)
                                                {
                                                    HoldingDetailSubmissionFrom = InsiderTrading.Common.Common.ApplyFormatting(Model.HoldingDetailSubmissionTo, InsiderTrading.Common.ConstEnum.DataFormatType.Date);
                                                }
                                            }
                                            <div class="input-group date">
                                                @Html.TextBoxFor(m => m.HoldingDetailSubmissionTo, HoldingDetailSubmissionTo, new { @class = "form-control", id = "6", gridtype = ViewBag.GridType })
                                                <span class="input-group-addon"><i class="icon icon-calender"></i></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-3 col-md-3 col-sm-12 col-xs-12">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Status, new { @class = "Control-label" })
                                        @Html.DropDownListFor(m => m.HoldingDetailSubmissionStatus, new SelectList(ViewBag.HoldingDetailStatus, "Key", "Value", ""), new { @class = "form-control", id = "7", gridtype = ViewBag.GridType })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                    <label>&nbsp;</label>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.SoftCopySubmission, new { @class = "Control-label" })
                                    </div>
                                </div>
                                <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                    <div class="form-group">
                                        <div class="form-group" id="sandbox-container">
                                            @Html.LabelFor(model => model.From, new { @class = "Control-label" })
                                            @{
                                                string SoftCopySubmissionFrom = "";
                                                if (Model != null)
                                                {
                                                    SoftCopySubmissionFrom = InsiderTrading.Common.Common.ApplyFormatting(Model.SoftCopySubmissionFrom, InsiderTrading.Common.ConstEnum.DataFormatType.Date);
                                                }
                                            }
                                            <div class="input-group date">
                                                @Html.TextBoxFor(m => m.SoftCopySubmissionFrom, SoftCopySubmissionFrom, new { @class = "form-control", id = "8", gridtype = ViewBag.GridType })
                                                <span class="input-group-addon"><i class="icon icon-calender"></i></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                    <div class="form-group">
                                        <div class="form-group" id="sandbox-container">
                                            @Html.LabelFor(model => model.To, new { @class = "Control-label" })
                                            @{
                                                string SoftCopySubmissionTo = "";
                                                if (Model != null)
                                                {
                                                    SoftCopySubmissionTo = InsiderTrading.Common.Common.ApplyFormatting(Model.SoftCopySubmissionTo, InsiderTrading.Common.ConstEnum.DataFormatType.Date);
                                                }
                                            }
                                            <div class="input-group date">
                                                @Html.TextBoxFor(m => m.SoftCopySubmissionTo, SoftCopySubmissionTo, new { @class = "form-control", id = "9", gridtype = ViewBag.GridType })
                                                <span class="input-group-addon"><i class="icon icon-calender"></i></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-3 col-md-3 col-sm-12 col-xs-12">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Status, new { @class = "Control-label" })
                                        @*@Html.DropDownListFor(m => m.SoftCopySubmissionStatus, new SelectList(ViewBag.SoftCopySubmissionStatus, "Key", "Value", ""), new { @class = "form-control", id = "10", gridtype = ViewBag.GridType })*@
                                        @Html.DropDownList("SoftCopySubmissionStatus1", new SelectList(ViewBag.SoftCopySubmissionStatus, "Key", "Value", ViewBag.SoftCopySubmitted), new { @class = "form-control", gridtype = @ViewBag.GridType, id = "10" })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                    <label>&nbsp;</label>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.HardCopySubmission, new { @class = "Control-label" })
                                    </div>
                                </div>
                                <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                    <div class="form-group">
                                        <div class="form-group" id="sandbox-container">
                                            @Html.LabelFor(model => model.From, new { @class = "Control-label" })
                                            @{
                                                string HardCopySubmissionFrom = "";
                                                if (Model != null)
                                                {
                                                    SoftCopySubmissionFrom = InsiderTrading.Common.Common.ApplyFormatting(Model.HardCopySubmissionFrom, InsiderTrading.Common.ConstEnum.DataFormatType.Date);
                                                }
                                            }
                                            <div class="input-group date">
                                                @Html.TextBoxFor(m => m.HardCopySubmissionFrom, HardCopySubmissionFrom, new { @class = "form-control", id = "11", gridtype = ViewBag.GridType })
                                                <span class="input-group-addon"><i class="icon icon-calender"></i></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                    <div class="form-group">
                                        <div class="form-group" id="sandbox-container">
                                            @Html.LabelFor(model => model.To, new { @class = "Control-label" })
                                            @{
                                                string HardCopySubmissionTo = "";
                                                if (Model != null)
                                                {
                                                    SoftCopySubmissionTo = InsiderTrading.Common.Common.ApplyFormatting(Model.HardCopySubmissionTo, InsiderTrading.Common.ConstEnum.DataFormatType.Date);
                                                }
                                            }
                                            <div class="input-group date">
                                                @Html.TextBoxFor(m => m.HardCopySubmissionTo, HardCopySubmissionTo, new { @class = "form-control", id = "12", gridtype = ViewBag.GridType })
                                                <span class="input-group-addon"><i class="icon icon-calender"></i></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-3 col-md-3 col-sm-12 col-xs-12">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Status, new { @class = "Control-label" })
                                        @Html.DropDownList("HardCopySubmissionStatusProperty", new SelectList(ViewBag.HardCopySubmissionStatus, "Key", "Value", ViewBag.HardCopySubmitted), new { @class = "form-control", id = "13", gridtype = ViewBag.GridType })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                    <label>&nbsp;</label>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.StockExchangeSubmission, new { @class = "Control-label" })
                                    </div>
                                </div>
                                <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                    <div class="form-group">
                                        <div class="form-group" id="sandbox-container">
                                            @Html.LabelFor(model => model.From, new { @class = "Control-label" })
                                            @{
                                                string StockExchangeSubmissionFrom = "";
                                                if (Model != null)
                                                {
                                                    StockExchangeSubmissionFrom = InsiderTrading.Common.Common.ApplyFormatting(Model.StockExchangeSubmissionFrom, InsiderTrading.Common.ConstEnum.DataFormatType.Date);
                                                }
                                            }
                                            <div class="input-group date">
                                                @Html.TextBoxFor(m => m.StockExchangeSubmissionFrom, StockExchangeSubmissionFrom, new { @class = "form-control", id = "14", gridtype = ViewBag.GridType })
                                                <span class="input-group-addon"><i class="icon icon-calender"></i></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                    <div class="form-group">
                                        <div class="form-group" id="sandbox-container">
                                            @Html.LabelFor(model => model.To, new { @class = "Control-label" })
                                            @{
                                                string StockExchangeSubmissionTo = "";
                                                if (Model != null)
                                                {
                                                    StockExchangeSubmissionTo = InsiderTrading.Common.Common.ApplyFormatting(Model.StockExchangeSubmissionTo, InsiderTrading.Common.ConstEnum.DataFormatType.Date);
                                                }
                                            }
                                            <div class="input-group date">
                                                @Html.TextBoxFor(m => m.StockExchangeSubmissionTo, StockExchangeSubmissionTo, new { @class = "form-control", id = "15", gridtype = ViewBag.GridType })
                                                <span class="input-group-addon"><i class="icon icon-calender"></i></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-3 col-md-3 col-sm-12 col-xs-12">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Status, new { @class = "Control-label" })
                                        @Html.DropDownListFor(m => m.StockExchangeSubmissionStatus, new SelectList(ViewBag.StockExchangeSubmissionStatus, "Key", "Value", ""), new { @class = "form-control", id = "16", gridtype = ViewBag.GridType })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.EmployeePAN)
                                        @Html.TextBoxFor(model => model.EmployeePAN, new { @class = "form-control", gridtype = @ViewBag.GridType, id = "18" })
                                        @Html.ValidationMessageFor(model => model.EmployeePAN)
                                    </div>
                                </div>
                                <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.EmployStatus, new { @class = "Control-label" })
                                        @Html.DropDownListFor(m => m.EmployeeStatus, new SelectList(ViewBag.EmployeeStatus, "Key", "Value", ""), new { @class = "form-control", id = "19", gridtype = ViewBag.GridType })
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                    <button type="button" class="btn btn-success" id="btnSearch"><i class="fa fa-search"></i> @InsiderTrading.Common.Common.getResource("com_btn_14005")</button>
                                    <button type="button" class="btn btn-success" id="btnReset" dt_name="btnReset" dt_gridtype="@ViewBag.GridType"><i class="fa fa-undo"></i> @InsiderTrading.Common.Common.getResource("com_btn_14006")</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </form>
            <div class="alert" style="display: none;" name="ErrorMessage" gridtype="@ViewBag.GridType"></div>
            @if (ViewData["inp_sParam"] == null)
            {
                Html.RenderAction("Index", "DatatableGrid", new { type = @ViewBag.GridType, btnSearch = "btnSearch", sSortCol = "", acid = InsiderTrading.Common.ConstEnum.UserActions.CO_DISCLOSURE_DETAILS_INITIAL_DISCLOSURE, bIsActionCol = false });
            }
            else
            {
                Html.RenderAction("Index", "DatatableGrid", new { type = @ViewBag.GridType, inp_sParam = @ViewData["inp_sParam"], btnSearch = "btnSearch", sSortCol = "", acid = InsiderTrading.Common.ConstEnum.UserActions.CO_DISCLOSURE_DETAILS_INITIAL_DISCLOSURE, bIsActionCol = false });
            }


            @if (InsiderTrading.Common.Common.CanPerform(InsiderTrading.Common.ConstEnum.UserActions.CRUSER_COUSER_VIEW))
            {
                @Html.Hidden("View", Url.Action("CreateLetter", "TradingTransaction", new { acid = InsiderTrading.Common.ConstEnum.UserActions.INSIDER_DISCLOSURE_DETAILS_INITIAL_DISCLOSURE_LETTER_SUBMISSION, nDisclosureTypeCodeId = InsiderTrading.Common.ConstEnum.Code.DisclosureTypeInitial, nLetterForCodeId = 0 }), new { @class = "gridtypecontrol", ctrtype = "link", gridcolumntype = @ViewBag.GridType + "_usr_grd_11073", param = "{'text':'','href':'" + Url.Action("CreateLetter", "TradingTransaction", new { acid = InsiderTrading.Common.ConstEnum.UserActions.INSIDER_DISCLOSURE_DETAILS_INITIAL_DISCLOSURE_LETTER_SUBMISSION, nDisclosureTypeCodeId = InsiderTrading.Common.ConstEnum.Code.DisclosureTypeInitial, nLetterForCodeId = 0 }) + "&nTransactionMasterId=<TransactionMasterId>','class':'display-icon icon icon-eye'}" })
            }

            @*@Html.Hidden("InitialDisclosure", Url.Action("Index", "TradingTransaction", new { acid = InsiderTrading.Common.ConstEnum.UserActions.CO_DISCLOSURE_DETAILS_INITIAL_DISCLOSURE, nDisclosureTypeCodeId = InsiderTrading.Common.ConstEnum.Code.DisclosureTypeInitial }))*@

            @Html.Hidden("InitialDisclosure", Url.Action("Index", "InsiderInitialDisclosure"))

            @Html.Hidden("DownloadFormE", Url.Action("Index", "InsiderInitialDisclosure"))

            @Html.Hidden("SoftCopy", Url.Action("CreateLetter", "TradingTransaction", new { acid = InsiderTrading.Common.ConstEnum.UserActions.CO_DISCLOSURE_DETAILS_INITIAL_DISCLOSURE_LETTER_SUBMISSION, nTransactionLetterId = 0, nDisclosureTypeCodeId = InsiderTrading.Common.ConstEnum.Code.DisclosureTypeInitial, nLetterForCodeId = 151001 }))
            @Html.Hidden("HardCopy", Url.Action("UploadHardDocument", "TradingTransaction", new { acid = InsiderTrading.Common.ConstEnum.UserActions.CO_DISCLOSURE_DETAILS_INITIAL_DISCLOSURE_LETTER_SUBMISSION, nDisclosureTypeCodeId = InsiderTrading.Common.ConstEnum.Code.DisclosureTypeInitial }))

            @Html.Hidden("ViewSoftCopy", Url.Action("ViewLetter", "TradingTransaction", new { acid = InsiderTrading.Common.ConstEnum.UserActions.CO_DISCLOSURE_DETAILS_INITIAL_DISCLOSURE_LETTER_SUBMISSION, nTransactionLetterId = 0, nDisclosureTypeCodeId = InsiderTrading.Common.ConstEnum.Code.DisclosureTypeInitial, nLetterForCodeId = 151001 }))
            @Html.Hidden("ViewHardCopy", Url.Action("ViewHardCopy", "TradingTransaction", new { acid = InsiderTrading.Common.ConstEnum.UserActions.CO_DISCLOSURE_DETAILS_INITIAL_DISCLOSURE_LETTER_SUBMISSION, nDisclosureTypeCodeId = InsiderTrading.Common.ConstEnum.Code.DisclosureTypeInitial }))

            @Html.Hidden("stockexchangecopylink", Url.Action("CreateLetter", "TradingTransaction", new { acid = InsiderTrading.Common.ConstEnum.UserActions.CO_DISCLOSURE_DETAILS_INITIAL_DISCLOSURE_STOCK_EXCHANGE_SUBMISSION, nDisclosureTypeCodeId = InsiderTrading.Common.ConstEnum.Code.DisclosureTypeInitial, nLetterForCodeId = InsiderTrading.Common.ConstEnum.Code.DisclosureLetterUserCO, IsStockExchange = true }))
            @Html.Hidden("stockexchangecopyviewlink", Url.Action("ViewLetter", "TradingTransaction", new { acid = InsiderTrading.Common.ConstEnum.UserActions.CO_DISCLOSURE_DETAILS_INITIAL_DISCLOSURE_STOCK_EXCHANGE_SUBMISSION, nDisclosureTypeCodeId = InsiderTrading.Common.ConstEnum.Code.DisclosureTypeInitial, nLetterForCodeId = InsiderTrading.Common.ConstEnum.Code.DisclosureLetterUserCO }))

            @Html.Hidden("SearchResult", searchResult)
            @Scripts.Render("~/bundles/SearchResult")

</section>




@Html.Hidden("AutoComplete", Url.Action("Autocomplete", "COInitialDisclosure"))
@Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/bundles/CoInitialDisclosure")

<script type="text/javascript">
    if ('@ViewBag.Change_Btn_Color' == 'True')
    {
        $("#btn_OwnSecurities_Details").removeClass("btn-success").addClass("btn-warning");
    }
</script>
