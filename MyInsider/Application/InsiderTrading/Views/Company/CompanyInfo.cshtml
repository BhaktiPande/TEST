@model InsiderTrading.Models.CompanyModel
@{
    ViewBag.Title = InsiderTrading.Common.Common.getResource("cmp_ttl_13086");
}
@{
    if (Model != null && Model.IsImplementing == true)
    { 
<div class="card-body">
    @using (Html.BeginForm("SaveCompany", "Company", new { ReturnUrl = ViewBag.ReturnUrl, formId = InsiderTrading.Common.ConstEnum.Code.frmSaveCompany }, FormMethod.Post, new { @class = "", role = "form", @autocomplete = "off", id = "frmBasicInfo" }))
    {
        
        @Html.AntiForgeryToken()
        @Html.ValidationSummary("", new Dictionary<string, object> { { "class", "alert alert-danger" }, { "id", "divValidationSummaryModal" } })
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                <div class="form-group">
                    @Html.LabelFor(m => m.CompanyName)
                    @Html.TextBoxFor(m => m.CompanyName, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.CompanyName)
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                <div class="form-group">
                    @Html.LabelFor(m => m.Address)
                    @Html.TextAreaFor(m => m.Address, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Address)
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                <div class="form-group">
                    @Html.LabelFor(m => m.Website)
                    @Html.TextBoxFor(m => m.Website, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Website)
                </div>
            </div>
            @Html.HiddenFor(m => m.CompanyId)
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                <div class="form-group">
                    @Html.LabelFor(m => m.EmailId)
                    @Html.TextBoxFor(m => m.EmailId, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.EmailId)
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                <div class="form-group">
                    @Html.LabelFor(m => m.ISINNumber)
                    @Html.TextBoxFor(m => m.ISINNumber, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.ISINNumber)
                </div>
            </div>

            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                <div class="form-group">
                    @Html.LabelFor(m => m.SmtpServer)
                    @Html.TextBoxFor(m => m.SmtpServer, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.SmtpServer)
                </div>
            </div>

            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                <div class="form-group">
                    @Html.LabelFor(m => m.SmtpPortNumber)
                    @Html.TextBoxFor(m => m.SmtpPortNumber, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.SmtpPortNumber)
                </div>
            </div>

            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                <div class="form-group">
                    @Html.LabelFor(m => m.SmtpUserName)
                    @Html.TextBoxFor(m => m.SmtpUserName, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.SmtpUserName)
                </div>
            </div>

            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                <div class="form-group">
                    @Html.LabelFor(m => m.SmtpPassword)
                    @Html.PasswordFor(m => m.SmtpPassword, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.SmtpPassword)
                </div>
        </div>
        </div>
        <div class="row">
            <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">

                @{
        if (Model != null && Model.IsImplementing == true)
        {
            <button type="button" name="SaveCompanyBasicInfo" id="btnSaveCompanyBasicInfo" class="btn btn-success" data-loading-text="Saving" autocomplete="off"><i class="fa fa-save"></i>@InsiderTrading.Common.Common.getResource("com_btn_14019")</button>
        }
        else
        {
            <button type="submit" class="btn btn-success" data-loading-text="Saving" name="SaveCompany" autocomplete="off"><i class="fa fa-save"></i>@InsiderTrading.Common.Common.getResource("com_btn_14017")</button>
        }
}
                @{
        if (Model != null && Model.CompanyId > 0 && Model.IsImplementing != true)
        {
            <button type="submit" name="DeleteCompany" id="DeleteCompany" class="btn btn-success" data-loading-text="Deleting" autocomplete="off">@InsiderTrading.Common.Common.getResource("com_btn_14009")</button>
        }
}
                @*<input type="submit" value='@InsiderTrading.Common.Common.getResource("com_btn_14011")' class="btn btn-success cancel" id="Cancel" name="Cancel" />*@
                <button type="submit" name="Cancel" class="btn btn-success cancel" id="cancelButton" data-dismiss="modal"><i class="fa fa-times"></i> @InsiderTrading.Common.Common.getResource("com_btn_14011")</button>
            </div>
        </div>
    <input type="hidden" name="authorization" value="SaveCompany:@InsiderTrading.Common.ConstEnum.UserActions.COMPANY_CREATE,DeleteCompany:@InsiderTrading.Common.ConstEnum.UserActions.COMPANY_DELETE" />
        @Html.HiddenFor(m=>m.CompanyId)
                                     @Html.HiddenFor(m => m.IsImplementing)
    <input type="hidden" id="successmsg" name="successmsg" value="@ViewBag.Success" />
    }
</div>
    }
    else
    {
     using (Html.BeginForm("SaveCompany", "Company", new { ReturnUrl = ViewBag.ReturnUrl,formId = InsiderTrading.Common.ConstEnum.Code.frmSaveCompany  }, FormMethod.Post, new { @class = "", role = "form", @autocomplete = "off", id = "frmBasicInfo" }))
      {
        @Html.AntiForgeryToken()
         <section class="content-header">
            <h1>@InsiderTrading.Common.Common.getResource("cmp_ttl_13086")</h1></section>
        @Html.ValidationSummary("", new Dictionary<string, object> { { "class", "alert alert-danger" }, { "id", "divValidationSummaryModal" } })
            <section class="content">
            <div class="row">
                <div class="col-lg-12">
                    <div class="card panel-default">
                        <div class="card-body">
                        
                                    <div class="row">
                                        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                                            <div class="form-group">
                                                @Html.LabelFor(m => m.CompanyName)
                                                @Html.TextBoxFor(m => m.CompanyName, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(m => m.CompanyName)
                                            </div>
                                        </div>
                                        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                                            <div class="form-group">
                                                @Html.LabelFor(m => m.Address)
                                                @Html.TextAreaFor(m => m.Address, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(m => m.Address)
                                            </div>
                                        </div>
                                        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                                            <div class="form-group">
                                                @Html.LabelFor(m => m.Website)
                                                @Html.TextBoxFor(m => m.Website, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(m => m.Website)
                                            </div>
                                        </div>
                                        @Html.HiddenFor(m => m.CompanyId)
                                        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                                            <div class="form-group">
                                                @Html.LabelFor(m => m.EmailId)
                                                @Html.TextBoxFor(m => m.EmailId, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(m => m.EmailId)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">

                                            @{
                                    if (Model != null && Model.IsImplementing == true)
                                    {
                                        <button type="button" name="SaveCompanyBasicInfo" id="btnSaveCompanyBasicInfo" class="btn btn-success" data-loading-text="Saving" autocomplete="off"><i class="fa fa-save"></i> @InsiderTrading.Common.Common.getResource("com_btn_14019")</button>
                                    }
                                    else
                                    {
                                        if (InsiderTrading.Common.Common.CanPerform(@ViewBag.UserAction)) { 
                                        <button type="submit" class="btn btn-success" data-loading-text="Saving" name="SaveCompany" autocomplete="off"><i class="fa fa-save"></i>  @InsiderTrading.Common.Common.getResource("com_btn_14017")</button>
                                            }
                                    }
                                            }
                                            @{
          if (Model != null && Model.CompanyId > 0 && Model.IsImplementing != true && InsiderTrading.Common.Common.CanPerform(InsiderTrading.Common.ConstEnum.UserActions.COMPANY_DELETE))
          {
            <button type="button" name="DeleteCompany" id="DeleteCompany" class="btn btn-success" data-loading-text="Deleting" autocomplete="off">@InsiderTrading.Common.Common.getResource("com_btn_14009")</button>
          }
}
                                          @*  <input type="submit" value='@InsiderTrading.Common.Common.getResource("com_btn_14011")' class="btn btn-success cancel" id="Cancel" name="Cancel" />*@
                                            <button type="submit" name="Cancel" class="btn btn-success cancel" id="cancelButton" data-dismiss="modal"><i class="fa fa-times"></i>  @InsiderTrading.Common.Common.getResource("com_btn_14011")</button>
                                        </div>
                                    </div>
                                    <input type="hidden" name="authorization" value="SaveCompany:@ViewBag.UserAction,DeleteCompany:@InsiderTrading.Common.ConstEnum.UserActions.COMPANY_DELETE" />
                            <input type="hidden" name="UserAction" value="@ViewBag.UserAction" id="UserAction" />
                            <input type="hidden" name="acid" value="@ViewBag.UserAction" id="acid" />
                                    @Html.HiddenFor(m=>m.CompanyId)
                                     @Html.HiddenFor(m => m.IsImplementing)
                            @Html.HiddenFor(m => m.ISINNumber)
                            </div>
                            </div></div></div>
        </section>
                                }
    }
}   
  @Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/bundles/jQueryFixes")
    @Scripts.Render("~/bundles/Company")
@Scripts.Render("~/bundles/JqueryConfirm")
@Scripts.Render("~/bundles/Messages")
    @Html.Hidden("SaveBasicInfo", Url.Action("SaveImplementingCompanyBasinInfo", "Company"))
@if (InsiderTrading.Common.Common.CanPerform(InsiderTrading.Common.ConstEnum.UserActions.COMPANY_DELETE))
{
    @*@Html.Hidden("DeleteFromGrid", Url.Action("DeleteFromGrid", "Company", new { acid = InsiderTrading.Common.ConstEnum.UserActions.COMPANY_DELETE }), new { @class = "gridtypecontrol", ctrtype = "link", gridcolumntype = @ViewBag.GridType + "_usr_grd_11073", param = "{'CompanyName':'<cmp_grd_13001>','CompanyId':'<CompanyId>','text':'','href':'javascript:void(0);','class':'display-icon icon icon-delete btnDeleteCompany'}" })*@
    @Html.Hidden("DeleteFromGrid", Url.Action("DeleteFromGrid", "Company", new { acid = InsiderTrading.Common.ConstEnum.UserActions.COMPANY_DELETE }), new { @class = "gridtypecontrol", ctrtype = "link", gridtype = @ViewBag.GridType, gridcolumntype = @ViewBag.GridType + "_usr_grd_11073", param = "{'text':'', 'href':'javascript:void(0);', 'name':'deleteRow', 'queryString':'[ {ID:\"CompanyName\", key:\"<cmp_grd_13001>\"},{ID:\"CompanyId\", key:\"<CompanyId>\"},{ID:\"formId\", key:\"88\"} ]', 'class':'display-icon icon icon-delete btnDeleteCompany'}" })
}

<script type="text/javascript">
    $(document).ready(function () {
        $('input,textarea', 'form').blur(function () {
            $(this).valid();
            $("#divValidationSummaryModal").removeClass("validation-summary-errors");
            $("#divValidationSummaryModal").addClass("validation-summary-valid");
        });
    });
</script>
