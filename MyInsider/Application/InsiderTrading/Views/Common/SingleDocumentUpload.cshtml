@model List<InsiderTrading.Models.DocumentDetailsModel>
@{
    ViewBag.Title = "SingleDocumentUpload";
    int MapToCodeTypeId = Model[0].MapToTypeCodeId;
    int Index = Model[0].Index;
    int SubIndex = Model[0].SubIndex;

    int user_action = (int)ViewData["user_action"];
}

<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 clsFileUpload">
    <div class="clsParentFileUpload row" indexvalue="@SubIndex">
        <div class="col-lg-9 col-md-9 col-sm-9 col-xs-9">
            <div class=" fileinput input-group fileinput-new" data-provides="fileinput">
                <div class="form-control" data-trigger="fileinput" style="min-height: 34px;height: auto;">
                    <i class="glyphicon glyphicon-file fileinput-exists"></i>
                    <span class="fileinput-filename" style="display:inline;word-break: break-all"></span>
                </div>
                <span class="input-group-addon btn btn-default btn-file">
                    <span class="fileinput-new">Select file</span>
                    <span class="fileinput-exists">Change</span>
                    <input type="hidden" value="" name="...">
                    <input type="file" name='[@Index].Value[@SubIndex].Document' class="form-control document" />
                    @Html.ValidationMessageFor(m => m[0].Document)
                </span>
                <a href="#" onClick="window.location.reload();return false;" class="input-group-addon btn btn-default fileinput-exists" data-dismiss="fileinput"><i class="fa fa-times-circle-o"></i></a>
            </div>
        </div>
        <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3">
            <button type="button" data-details="@MapToCodeTypeId" data-index="@Model[0].Index" data-flag="false" class="btn btn-success clsStartFileUpload" id="fleUpload"><i class="fa fa-upload"></i> Upload</button>
        </div>
    </div>
    <div class="clsDivDynamic row" style="word-break: break-all"  id="doc_@Index@Model[0].SubIndex">
        @if (Model[0].DocumentId != 0 && Model[0].DocumentId != null)
        {
            <div id="@Index@SubIndex">
                <div class="col-lg-6 col-md-6 col-sm-6 col-xs-6" >
                    @Html.ActionLink(Model[0].DocumentName, "Download", "Document", new { nDocumentDetailsID = Model[0].DocumentId, GUID = Model[0].GUID, sDocumentName = Model[0].DocumentName, sFileType = Model[0].FileType, acid = user_action }, null)
                </div>

                @if (InsiderTrading.Common.Common.CanPerform(InsiderTrading.Common.ConstEnum.UserActions.INSIDER_DOCUMENT_DELETE))
                {
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-6">
                        <a href="javascript:void(0);" class="display-icon icon icon-delete deleteDocument" querystring="[{key:'acid','value':@user_action},{key:'nDocumentDetailsID',value:@Model[0].DocumentId},{key:'nIndex',value:@Model[0].Index},{key:'nSubIndex',value:@Model[0].SubIndex},{key:'GUID',value:'@Model[0].GUID'},{key:'nMapToId',value:'@Model[0].MapToId'},{key:'nMapToTypeCodeId',value:'@Model[0].MapToTypeCodeId'}]"></a>
                    </div>
                }
            </div>
        }
    </div>
</div>

<input type="hidden" name="[@Index].Key" value="@Model[0].MapToTypeCodeId" />
<input type="hidden" name="[@Index].Value[@SubIndex].DocumentId" value="@Model[0].DocumentId" />
<input type="hidden" name="[@Index].Value[@SubIndex].MapToTypeCodeId" value="@Model[0].MapToTypeCodeId" />
<input type="hidden" name="[@Index].Value[@SubIndex].MapToId" value="@Model[0].MapToId" />
<input type="hidden" name="[@Index].Value[@SubIndex].PurposeCodeId" value="@Model[0].PurposeCodeId" />
<input type="hidden" name="[@Index].Value[@SubIndex].GUID" value="@Model[0].GUID" />
<input type="hidden" name="[@Index].Value[@SubIndex].Index" value="@Model[0].Index" />
<input type="hidden" name="[@Index].Value[@SubIndex].SubIndex" value="@Model[0].SubIndex" />
<input type="hidden" name="[@Index].Value[@SubIndex].DocumentName" value="@Model[0].DocumentName" />

@Html.Hidden("buttonName")
@Html.Hidden("index")
@Html.Hidden("divclone")
@Html.Hidden("acid", user_action)
@Html.Hidden("file_acid", user_action)

@Html.Hidden("del_action", InsiderTrading.Common.Common.CanPerform(InsiderTrading.Common.ConstEnum.UserActions.INSIDER_DOCUMENT_DELETE))

@if (InsiderTrading.Common.Common.CanPerform(user_action))
{
    @Html.Hidden("DeleteSingleDocument", Url.Action("DeleteSingleDocumentDetails", "Document", new { acid = user_action }))
}
@Html.Hidden("DownloadDocument", Url.Action("Download", "Document"))
@Html.Hidden("UploadDocument", Url.Action("UploadDocument", "Document"))











