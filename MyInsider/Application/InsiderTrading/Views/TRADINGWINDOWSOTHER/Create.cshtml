@model InsiderTrading.Models.TradingWindowEventModel

@{
    ViewBag.Title = InsiderTrading.Common.Common.getResource("rul_ttl_15350");
}
@using (Html.BeginForm("Create", "TradingWindowsOther", new { ReturnUrl = ViewBag.ReturnUrl, formId = InsiderTrading.Common.ConstEnum.Code.frmSaveTradingWindowOther }, FormMethod.Post, new { @class = "", role = "form", @autocomplete = "off" }))
{
    @Html.AntiForgeryToken()
    <input type="hidden" name="ParentId" value="@ViewBag.ParentId" />
    <section class="content-header">
        <h1>@ViewBag.Title</h1>
    </section>
    <section class="content">
        @Html.ValidationSummary("", new Dictionary<string, object> { { "class", "alert alert-danger" }, { "id", "divValidationSummaryModal" } })
        @{
    if (ViewBag.HasApplicabilityDefinedFlag == 0 && Model.TradingWindowEventId > 0)
    {
        <div id="divSuccess" class="alert alert-danger">@InsiderTrading.Common.Common.getResource("rul_msg_15429")</div>
    }
        }
        <div class="row">
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">

                <div class="panel panel-default">
                    <div class="panel-body">
                        @{if (Model.TradingWindowId != "0")
                        {
                            <div class="row">
                                <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                                    <div class="form-group">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.TradingWindowId, new { @class = "control-label " })
                                            @Html.TextBoxFor(model => model.TradingWindowId, Model.TradingWindowId, new { @class = "form-control", @disabled = "disabled" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        }
                        <div class="row">
                            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                                <div class="form-group">
                                    @Html.LabelFor(nmodel => Model.TradingWindowEvent, new { @class = "control-label" })
                                    @Html.DropDownListFor(model => model.TradingWindowEventCodeId, new SelectList(ViewBag.TradingWindowsOtherEvent, "Key", "Value", ""), new { @class = "form-control", id = "TradingWindowEventCodeId" })
                                    @Html.ValidationMessageFor(model => model.TradingWindowEventCodeId)
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12">
                                <div class="form-group" id="sandbox-container">
                                    @Html.LabelFor(model => model.ResultDeclarationDate, new { @class = "control-label " })
                                    <div class="input-group date">
                                        @{
                        string RDD = "";
                        if (Model.ResultDeclarationDate != null)
                        {
                            RDD = InsiderTrading.Common.Common.ApplyFormatting(Model.ResultDeclarationDate, InsiderTrading.Common.ConstEnum.DataFormatType.Date);
                        }
                                        }
                                        <div class="input-group date" data-date-format="dd/mm/yyyy">
                                                                                    @{
                                            if (ViewBag.ISEditWindow == 1 || Model.TradingWindowEventId <= 0)
                                            {
                                                @Html.TextBox("ResultDeclarationDate", RDD, null, new { @class = "form-control" })
                                            }
                                            else
                                            {
                                                @Html.TextBox("ResultDeclarationDate", RDD, null, new { @class = "form-control", @disabled = "disabled" })
                                            }
                                            }
                                            <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.ResultDeclarationDate)
                                    </div>
                                </div>
                                <input type="hidden" value="@InsiderTrading.Common.Common.ApplyFormatting(Model.ResultDeclarationDate, InsiderTrading.Common.ConstEnum.DataFormatType.Date)" id="ResultDeclarationDate" name="ResultDeclarationDate" />
                            </div>
                            <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12">
                                @Html.LabelFor(model => model.ResultDeclarationTime, new { @class = "control-label " })
                                <div class="row">
                                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                                        <div class="form-group">
                                            @{
                                            if (ViewBag.ISEditWindow == 1 || Model.TradingWindowEventId <= 0)
                                            {
                                                @Html.DropDownListFor(model => model.Hours, new SelectList(ViewBag.Hrs, "Key", "Value", ""), new { @class = "form-control", id = "ResultDeclarationHrs" })
                                            }
                                            else
                                            {
                                                @Html.DropDownListFor(model => model.Hours, new SelectList(ViewBag.Hrs, "Key", "Value", ""), new { @class = "form-control", id = "ResultDeclarationHrs", @disabled = "disabled" })
                                            }
                                            }
                                            @Html.HiddenFor(model => model.Hours)
                                        </div>
                                    </div>
                                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                                        <div class="form-group">
                                            @{
                                            if (ViewBag.ISEditWindow == 1 || Model.TradingWindowEventId <= 0)
                                            {
                                                @Html.DropDownListFor(model => model.Minutes, new SelectList(ViewBag.Mins, "Key", "Value", ""), new { @class = "form-control", id = "ResultDeclarationMins" })
                                            }
                                            else
                                            {
                                                @Html.DropDownListFor(model => model.Minutes, new SelectList(ViewBag.Mins, "Key", "Value", ""), new { @class = "form-control", id = "ResultDeclarationMins", @disabled = "disabled" })
                                            }
                                            }
                                            @Html.HiddenFor(model => model.Minutes)
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                                @Html.Label(InsiderTrading.Common.Common.getResource("rul_lbl_15025"), new { @class = "control-label" })
                                <div class="row">
                                    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Days, new { @class = "control-label", })
                                            @{
                                            if (ViewBag.ISEditWindow == 1 || Model.TradingWindowEventId <= 0)
                                            {
                                                @Html.TextBoxFor(model => model.DaysPriorToResultDeclaration, null, new { @class = "form-control numericOnly ", id = "txtWindowsClosesBefore" })
                                            }
                                            else
                                            {
                                                @Html.TextBoxFor(model => model.DaysPriorToResultDeclaration, null, new { @class = "form-control numericOnly ", id = "txtWindowsClosesBefore", @readonly = "readonly" })
                                            }
                                            }
                                            @Html.ValidationMessageFor(model => model.DaysPriorToResultDeclaration)
                                        </div>
                                    </div>
                                    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Hours, new { @class = "control-label", })
                                            @{
                                            if (ViewBag.ISEditWindow == 1 || Model.TradingWindowEventId <= 0)
                                            {
                                                @Html.DropDownListFor(model => model.WindowClosesBeforeHours, new SelectList(ViewBag.Hrs, "Key", "Value", ""), new { @class = "form-control", id = "ddlWindowClosesBeforeHours" })
                                            }
                                            else
                                            {
                                                @Html.DropDownListFor(model => model.WindowClosesBeforeHours, new SelectList(ViewBag.Hrs, "Key", "Value", ""), new { @class = "form-control", id = "ddlWindowClosesBeforeHours", @disabled = "disabled" })
                                            }
                                            }
                                            @Html.HiddenFor(model => model.WindowClosesBeforeHours)
                                        </div>
                                    </div>
                                    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Minutes, new { @class = "control-label", })
                                            @{
                                            if (ViewBag.ISEditWindow == 1 || Model.TradingWindowEventId <= 0)
                                            {
                                                @Html.DropDownListFor(model => model.WindowClosesBeforeMinutes, new SelectList(ViewBag.Mins, "Key", "Value", ""), new { @class = "form-control col-xs-12", id = "ddlWindowClosesBeforeMinutes" })
                                            }
                                            else
                                            {
                                                @Html.DropDownListFor(model => model.WindowClosesBeforeMinutes, new SelectList(ViewBag.Mins, "Key", "Value", ""), new { @class = "form-control col-xs-12", id = "ddlWindowClosesBeforeMinutes", @disabled = "disabled" })
                                            }
                                            }
                                            @Html.HiddenFor(model => model.WindowClosesBeforeMinutes)
                                        </div>
                                    </div>
                                    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                        <div class="form-group">
                                            <br />
                                            @{
                                            if (ViewBag.ISEditWindow == 1 || Model.TradingWindowEventId <= 0)
                                            {
                                                <button type="button" class="btn btn-success" id="CalculateBefore">@InsiderTrading.Common.Common.getResource("rul_btn_15027")</button>
                                            }
                                            else
                                            {
                                                <button type="button" disabled="disabled" class="btn btn-success" id="CalculateBefore">@InsiderTrading.Common.Common.getResource("rul_btn_15027")</button>
                                            }
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                                @Html.Label(@InsiderTrading.Common.Common.getResource("rul_lbl_15430"), new { @class = "control-label" })
                                <div class="row">
                                    <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.WindowCloseDate, new { @class = "control-label", })
                                            @{
                                            string WCD = "";
                                            if (Model.ResultDeclarationDate != null)
                                            {
                                                WCD = InsiderTrading.Common.Common.ApplyFormatting(Model.WindowCloseDate, InsiderTrading.Common.ConstEnum.DataFormatType.Date);

                                            }
                                            }
                                            @Html.TextBoxFor(model => model.WindowCloseDate, WCD, new { @class = "form-control", @readonly = "readonly", id = "WindowCloseDate" })
                                            @Html.ValidationMessageFor(model => model.WindowCloseDate)
                                        </div>
                                    </div>
                                    <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Hours, new { @class = "control-label", })
                                            @Html.TextBoxFor(model => model.WindowClosesHours, new { @class = "form-control", @readonly = "readonly" })
                                        </div>
                                    </div>
                                    <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Minutes, new { @class = "control-label", })
                                            @Html.TextBoxFor(model => model.WindowClosesMinutes, new { @class = "form-control", @readonly = "readonly" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                                @Html.Label(InsiderTrading.Common.Common.getResource("rul_lbl_15026"), new { @class = "control-label" })
                                <div class="row">
                                    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Days, new { @class = "control-label", })
                                            @{
                                            if (ViewBag.ISEditWindowOpenPart == 1 || Model.TradingWindowEventId <= 0)
                                            {
                                                @Html.TextBoxFor(model => model.DaysPostResultDeclaration, null, new { @class = "form-control numericOnly ", id = "txtWindowOpenAfter" })
                                            }
                                            else
                                            {
                                                @Html.TextBoxFor(model => model.DaysPostResultDeclaration, null, new { @class = "form-control numericOnly ", id = "txtWindowOpenAfter", @readonly = "readonly" })
                                            }
                                            }
                                            @Html.ValidationMessageFor(model => model.DaysPostResultDeclaration)
                                        </div>
                                    </div>
                                    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Hours, new { @class = "control-label", })
                                            @{
                                            if (ViewBag.ISEditWindowOpenPart == 1 || Model.TradingWindowEventId <= 0)
                                            {
                                                @Html.DropDownListFor(model => model.WindowOpensAfterHours, new SelectList(ViewBag.Hrs, "Key", "Value", ""), new { @class = "form-control", id = "ddlWindowOpensAfterHours" })
                                            }
                                            else
                                            {
                                                @Html.DropDownListFor(model => model.WindowOpensAfterHours, new SelectList(ViewBag.Hrs, "Key", "Value", ""), new { @class = "form-control", id = "ddlWindowOpensAfterHours", @disabled = "disabled" })
                                            }
                                            }
                                            @Html.HiddenFor(model => model.WindowOpensAfterHours)
                                        </div>
                                    </div>
                                    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Minutes, new { @class = "control-label", })
                                            @{
                                            if (ViewBag.ISEditWindowOpenPart == 1 || Model.TradingWindowEventId <= 0)
                                            {
                                                @Html.DropDownListFor(model => model.WindowOpensAfterMinutes, new SelectList(ViewBag.Mins, "Key", "Value", ""), new { @class = "form-control", id = "ddlWindowOpensAfterMinutes" })
                                            }
                                            else
                                            {
                                                @Html.DropDownListFor(model => model.WindowOpensAfterMinutes, new SelectList(ViewBag.Mins, "Key", "Value", ""), new { @class = "form-control", id = "ddlWindowOpensAfterMinutes", @disabled = "disabled" })
                                            }
                                            }
                                            @Html.HiddenFor(model => model.WindowOpensAfterMinutes)
                                        </div>
                                    </div>
                                    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                        <br />
                                        @{
                                        if (ViewBag.ISEditWindowOpenPart == 1 || Model.TradingWindowEventId <= 0)
                                        {
                                            <button type="button" class="btn btn-success" id="CalculateAfter">@InsiderTrading.Common.Common.getResource("rul_btn_15027")</button>
                                        }
                                        else
                                        {
                                            <button type="button" disabled="disabled" class="btn btn-success" id="CalculateAfter">@InsiderTrading.Common.Common.getResource("rul_btn_15027")</button>
                                        }
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                                @Html.Label(@InsiderTrading.Common.Common.getResource("rul_lbl_15433"), new { @class = "control-label" })
                                <div class="row">
                                    <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.WindowOpenDate, new { @class = "control-label", })
                                            @{
                                            string WOD = "";
                                            if (Model.ResultDeclarationDate != null)
                                            {
                                                WOD = InsiderTrading.Common.Common.ApplyFormatting(Model.WindowOpenDate, InsiderTrading.Common.ConstEnum.DataFormatType.Date);

                                            }
                                            }
                                            @Html.TextBoxFor(model => model.WindowOpenDate, WOD, new { @class = "form-control", @readonly = "readonly", id = "WindowOpenDate" })
                                            @Html.ValidationMessageFor(model => model.WindowOpenDate)
                                        </div>
                                    </div>
                                    <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Hours, new { @class = "control-label", })
                                            @Html.TextBoxFor(model => model.WindowOpensHours, new { @class = "form-control", @readonly = "readonly" })
                                        </div>
                                    </div>

                                    <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Minutes, new { @class = "control-label", })
                                            @Html.TextBoxFor(model => model.WindowOpensMinutes, new { @class = "form-control", @readonly = "readonly" })
                                        </div>
                                    </div>
                                    <div class="col-lg-1 col-md-1 col-sm-6 col-xs-12">&nbsp;</div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-2 col-md-2 col-sm-3 col-xs-12">
                                @Html.LabelFor(model => model.TradingWindowStatusCodeId, new { @class = "control-label " })
                            </div>
                            <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
                                @{
                                if (ViewBag.HasApplicabilityDefinedFlag == 1)
                                {
                                    @Html.RadioButtonFor(model => model.TradingWindowStatusCodeId, InsiderTrading.Common.ConstEnum.Code.PolicyDocumentWindowStatusActive) <label class="normalLable">ACTIVATE</label>
                                                                @Html.RadioButtonFor(model => model.TradingWindowStatusCodeId, InsiderTrading.Common.ConstEnum.Code.PolicyDocumentWindowStatusDeactive) <label class="normalLable">DEACTIVATE</label>
                                }
                                else
                                {
                                    @Html.RadioButtonFor(model => model.TradingWindowStatusCodeId, InsiderTrading.Common.ConstEnum.Code.PolicyDocumentWindowStatusActive, new { disabled = "disabled" }) <label class="normalLable">ACTIVATE</label>
                                                                @Html.RadioButtonFor(model => model.TradingWindowStatusCodeId, InsiderTrading.Common.ConstEnum.Code.PolicyDocumentWindowStatusDeactive, new { disabled = "disabled" }) <label class="normalLable">DEACTIVATE</label>
                                }
                                }
                            </div>
                        </div>
                        <br>
                        <div class="row">
                            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                                @{
                                    if (ViewBag.ISEditWindowOpenPart == 1 || Model.TradingWindowEventId <= 0)
                                    {
                                        if (InsiderTrading.Common.Common.CanPerform(ViewBag.TradingWindowOtherUserAction)) { 
                                        <button type="submit" class="btn btn-success" name="Create"><i class="fa fa-save"></i> @InsiderTrading.Common.Common.getResource("com_btn_14017")</button>
                                        }
                                        if (Model != null && Model.TradingWindowEventId > 0)
                                        {
                                            if (Model.TradingWindowStatusCodeId != InsiderTrading.Common.ConstEnum.Code.PolicyDocumentWindowStatusActive && InsiderTrading.Common.Common.CanPerform(InsiderTrading.Common.ConstEnum.UserActions.TRADING_WINDOW_OTHER_DELETE))
                                            {
                                                <button type="button" id="DeleteTradingWindowEventOther" name="DeleteTradingWindowEventOther" class="btn btn-success" data-loading-text="Deleting" autocomplete="off">@InsiderTrading.Common.Common.getResource("com_btn_14009")</button>
                                            }
                                            <button type="submit" class="btn btn-success" id="DeleteEvent" name="DeleteEvent" style="display:none;"><i class="fa fa-save"></i>@InsiderTrading.Common.Common.getResource("com_btn_14009")</button>
                                            <a class="btn btn-success" data-toggle="modal" href='@Url.Action("Index", "Applicability", new { acid = InsiderTrading.Common.ConstEnum.UserActions.TRADING_WINDOW_OTHER_EDIT, nApplicabilityType = InsiderTrading.Common.ConstEnum.Code.TradingWindowOther, nMasterID = Model.TradingWindowEventId, CalledFrom = "Edit" })' role="button"> @InsiderTrading.Common.Common.getResource("rul_btn_15251")</a>
                                        }
                                    }
                                }
                                <a class="btn btn-success" href='@Url.Action("Index", "TradingWindowsOther", new { acid = InsiderTrading.Common.ConstEnum.UserActions.TRADING_WINDOW_OTHER_VIEW})' role="button"><i class="fa fa-times"></i> @InsiderTrading.Common.Common.getResource("com_btn_14010")</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            @Html.HiddenFor(model => model.TradingWindowId)
            @Html.HiddenFor(model => model.TradingWindowEventId)
            <input type="hidden" name="authorization" value="Create:@ViewBag.TradingWindowOtherUserAction,DeleteEvent:@InsiderTrading.Common.ConstEnum.UserActions.TRADING_WINDOW_OTHER_DELETE" />
            <input type="hidden" name="TradingWindowOtherUserAction" value="@ViewBag.TradingWindowOtherUserAction" id="TradingWindowOtherUserAction" />
        </div>
    </section>
}
@Scripts.Render("~/bundles/TradingWindowsEventOther")