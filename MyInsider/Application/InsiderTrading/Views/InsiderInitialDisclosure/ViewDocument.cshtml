@model InsiderTrading.Models.UsersPolicyDocumentModel

@{
    ViewBag.Titel = "View Document";

    //check if file display for policy document or hard copy and set back button link accordingly 
    string page_called_from = "";


    string view_name = "";
    string controller_name = "";

    RouteValueDictionary controller_paramter = new RouteValueDictionary();

    //check if page is call from report page or not 

    if (!ViewBag.IsCalledFromReport)
    {
        page_called_from = ViewBag.CalledFrom;

        switch (page_called_from)
        {
            case "ViewAgree":
                view_name = "Index";
                controller_name = "InsiderInitialDisclosure";
                controller_paramter.Add("acid", InsiderTrading.Common.ConstEnum.UserActions.INSIDER_DISCLOSURE_DETAILS_INITIAL_DISCLOSURE);
                //controller_paramter.Add("nTransactionMasterId", ViewBag.TransactionMasterId);
                //controller_paramter.Add("nDisclosureTypeCodeId", ViewBag.DisclosureTypeId);
                controller_paramter.Add("UserInfoId", ViewBag.nUserInfoId);
                controller_paramter.Add("ReqModuleId", InsiderTrading.Common.ConstEnum.Code.RequiredModuleOwnSecurity);
                controller_paramter.Add("CalledFrom", ViewBag.CalledFrom);

                break;

            case "ViewAgree_OS":
                view_name = "Index";
                controller_name = "InsiderInitialDisclosure";
                controller_paramter.Add("acid", InsiderTrading.Common.ConstEnum.UserActions.INSIDER_DISCLOSURE_DETAILS_INITIAL_DISCLOSURE);
                //controller_paramter.Add("nTransactionMasterId", ViewBag.TransactionMasterId);
                //controller_paramter.Add("nDisclosureTypeCodeId", ViewBag.DisclosureTypeId);
                controller_paramter.Add("UserInfoId", ViewBag.nUserInfoId);
                controller_paramter.Add("ReqModuleId", InsiderTrading.Common.ConstEnum.Code.RequiredModuleOtherSecurity);
                controller_paramter.Add("CalledFrom", ViewBag.CalledFrom);

                break;

            case "View":
                view_name = "Index";
                controller_name = "InsiderInitialDisclosure";
                controller_paramter.Add("acid", InsiderTrading.Common.ConstEnum.UserActions.INSIDER_DISCLOSURE_DETAILS_INITIAL_DISCLOSURE);
                //controller_paramter.Add("nTransactionMasterId", ViewBag.TransactionMasterId);
                //controller_paramter.Add("nDisclosureTypeCodeId", ViewBag.DisclosureTypeId);
                controller_paramter.Add("UserInfoId", ViewBag.nUserInfoId);
                controller_paramter.Add("ReqModuleId", InsiderTrading.Common.ConstEnum.Code.RequiredModuleOwnSecurity);
                controller_paramter.Add("CalledFrom", ViewBag.CalledFrom);

                break;
            case "View_OS":
                view_name = "Index";
                controller_name = "InsiderInitialDisclosure";
                controller_paramter.Add("acid", InsiderTrading.Common.ConstEnum.UserActions.INSIDER_DISCLOSURE_DETAILS_INITIAL_DISCLOSURE);
                //controller_paramter.Add("nTransactionMasterId", ViewBag.TransactionMasterId);
                //controller_paramter.Add("nDisclosureTypeCodeId", ViewBag.DisclosureTypeId);
                controller_paramter.Add("UserInfoId", ViewBag.nUserInfoId);
                controller_paramter.Add("ReqModuleId", InsiderTrading.Common.ConstEnum.Code.RequiredModuleOtherSecurity);
                controller_paramter.Add("CalledFrom", ViewBag.CalledFrom);

                break;

            case "ViewHardCopy":
                view_name = "Index";
                controller_name = "InsiderInitialDisclosure";
                controller_paramter.Add("acid", InsiderTrading.Common.ConstEnum.UserActions.INSIDER_DISCLOSURE_DETAILS_INITIAL_DISCLOSURE);
                controller_paramter.Add("UserInfoId", ViewBag.nUserInfoId);
                controller_paramter.Add("ReqModuleId", InsiderTrading.Common.ConstEnum.Code.RequiredModuleOwnSecurity);

                break;

            case "ViewHardCopyOS":
                view_name = "Index";
                controller_name = "InsiderInitialDisclosure";
                controller_paramter.Add("acid", InsiderTrading.Common.ConstEnum.UserActions.INSIDER_DISCLOSURE_DETAILS_INITIAL_DISCLOSURE);
                controller_paramter.Add("UserInfoId", ViewBag.nUserInfoId);
                controller_paramter.Add("ReqModuleId", InsiderTrading.Common.ConstEnum.Code.RequiredModuleOtherSecurity);

                break;

            case "ViewHardCopyOS_CD":
                view_name = "IndexOS";
                controller_name = "PreclearanceRequestNonImplCompany";
                controller_paramter.Add("acid", InsiderTrading.Common.ConstEnum.UserActions.PreclearanceRequestOtherSecurities);
                //controller_paramter.Add("UserInfoId", ViewBag.nUserInfoId);
                //controller_paramter.Add("ReqModuleId", InsiderTrading.Common.ConstEnum.Code.RequiredModuleOtherSecurity);

                break;

            case "ViewHardCopyOS_CDCO":
                view_name = "CoIndex_OS";
                controller_name = "PreclearanceRequestNonImplCompany";
                controller_paramter.Add("acid", InsiderTrading.Common.ConstEnum.UserActions.PreclearanceRequestOtherSecurities);
                //controller_paramter.Add("UserInfoId", ViewBag.nUserInfoId);
                //controller_paramter.Add("ReqModuleId", InsiderTrading.Common.ConstEnum.Code.RequiredModuleOtherSecurity);

                break;

            case "ViewAgreeList":
                view_name = "List";
                controller_name = "InsiderInitialDisclosure";
                controller_paramter.Add("acid", InsiderTrading.Common.ConstEnum.UserActions.INSIDER_DISCLOSURE_DETAILS_POLICY_DOCUMENT_LIST);
                controller_paramter.Add("frm", ViewBag.frm);

                break;

            case "PolicyDocument":
                view_name = "View";
                controller_name = "PolicyDocuments";
                controller_paramter.Add("acid", InsiderTrading.Common.ConstEnum.UserActions.TRANSACTION_POLICY_DOCUMENT_VIEW);
                controller_paramter.Add("pdid", ViewBag.PDID);

                break;

            case "InitialInsider":
                view_name = "Index";
                controller_name = "InsiderInitialDisclosure";
                controller_paramter.Add("acid", InsiderTrading.Common.ConstEnum.UserActions.INSIDER_DISCLOSURE_DETAILS_INITIAL_DISCLOSURE);

                break;

            case "InitialCO":
                view_name = "Index";
                controller_name = "InsiderInitialDisclosure";
                controller_paramter.Add("acid", InsiderTrading.Common.ConstEnum.UserActions.INSIDER_DISCLOSURE_DETAILS_INITIAL_DISCLOSURE);
                controller_paramter.Add("UserInfoId", ViewBag.nUserInfoId);
                controller_paramter.Add("ReqModuleId", InsiderTrading.Common.ConstEnum.Code.RequiredModuleOwnSecurity);

                break;

            case "InitialCO_OS":
                view_name = "Index";
                controller_name = "InsiderInitialDisclosure";
                controller_paramter.Add("acid", InsiderTrading.Common.ConstEnum.UserActions.INSIDER_DISCLOSURE_DETAILS_INITIAL_DISCLOSURE);
                controller_paramter.Add("UserInfoId", ViewBag.nUserInfoId);
                controller_paramter.Add("ReqModuleId", InsiderTrading.Common.ConstEnum.Code.RequiredModuleOtherSecurity);

                break;

            case "ContinousInsider":
                view_name = "Index";
                controller_name = "PreClearanceRequest";
                controller_paramter.Add("acid", InsiderTrading.Common.ConstEnum.UserActions.INSIDER_DISCLOSURE_DETAILS_CONTINUOUS_DISCLOSURE);

                break;

            case "ContinousCO":
                view_name = "ListByCO";
                controller_name = "PreClearanceRequest";
                controller_paramter.Add("acid", InsiderTrading.Common.ConstEnum.UserActions.CO_DISCLOSURE_DETAILS_CONTINUOUS_DISCLOSURE);

                break;

            case "PeriodEndInsider":
                view_name = "PeriodStatus";
                controller_name = "PeriodEndDisclosure";
                controller_paramter.Add("acid", InsiderTrading.Common.ConstEnum.UserActions.INSIDER_DISCLOSURE_DETAILS_PERIOD_END_DISCLOSURE);
                controller_paramter.Add("year", ViewBag.Year);

                break;

            case "PeriodEndInsider_OS":
                view_name = "PeriodStatusOS";
                controller_name = "PeriodEndDisclosure_OS";
                //controller_paramter.Add("acid", InsiderTrading.Common.ConstEnum.UserActions.INSIDER_DISCLOSURE_DETAILS_PERIOD_END_DISCLOSURE_OS);
                if (ViewBag.nUserInfoId !=0)
                {
                    controller_paramter.Add("uid", ViewBag.nUserInfoId);
                    controller_paramter.Add("year", ViewBag.Year);
                    controller_paramter.Add("acid", InsiderTrading.Common.ConstEnum.UserActions.CO_DISCLOSURE_DETAILS_PERIOD_END_DISCLOSURE_OS); 
                }
                else
                {
                    controller_paramter.Add("acid", InsiderTrading.Common.ConstEnum.UserActions.INSIDER_DISCLOSURE_DETAILS_PERIOD_END_DISCLOSURE_OS);
                }
                break;

            case "PeriodEndCO_OS":
                view_name = "UserStatusOS";
                controller_name = "PeriodEndDisclosure_OS";
                controller_paramter.Add("acid", InsiderTrading.Common.ConstEnum.UserActions.CO_DISCLOSURE_DETAILS_PERIOD_END_DISCLOSURE_OS);
                controller_paramter.Add("year", ViewBag.Year);
                //controller_paramter.Add("Period", ViewBag.Period);

                break;

            case "PeriodEndCO":
                view_name = "UsersStatus";
                controller_name = "PeriodEndDisclosure";
                controller_paramter.Add("acid", InsiderTrading.Common.ConstEnum.UserActions.CO_DISCLOSURE_DETAILS_PERIOD_END_DISCLOSURE);
                controller_paramter.Add("year", ViewBag.Year);
                controller_paramter.Add("Period", ViewBag.Period);

                break;

            case "COFAQ":
                view_name = "Index";
                controller_name = "CODashboard";
                controller_paramter.Add("acid", InsiderTrading.Common.ConstEnum.UserActions.CRUSER_COUSERDASHBOARD_DASHBOARD);

                break;

            case "InsiderFAQ":
                view_name = "Index";
                controller_name = "InsiderDashboard";
                controller_paramter.Add("acid", InsiderTrading.Common.ConstEnum.UserActions.DASHBOARD_INSIDERUSER);

                break;

            case "DisclosureDocuments":
                view_name = "Index";
                controller_name = "TradingTransaction";
                controller_paramter.Add("acid", ViewBag.UserAction);
                controller_paramter.Add("TransactionMasterId", ViewBag.PDID);
                controller_paramter.Add("ShowDocumentTab", 1);

                break;
        }
    }

    //set page header 
    string page_header = InsiderTrading.Common.Common.getResource("dis_lbl_17308") + " " + Model.PolicyDocumentName;

    if (ViewBag.CalledFromHardCopy)
    {
        page_header = InsiderTrading.Common.Common.getResource("dis_ttl_17103");
    }
}

@Styles.Render("~/content/SW360")

<section class="content-header">
    <h1> @page_header </h1>
</section>  

<section class="content">
    @{
        //check flag for no hard copy document flag 
        if (ViewBag.HardCopyFileNotUploaded)
        {
            <div class="col-lg-12">
                @InsiderTrading.Common.Common.getResource("dis_lbl_17119")
            </div>
            <div> &nbsp;</div>
            <div class="col-lg-2">
            @{
                if (ViewBag.IsCalledFromReport)
                {
                    <a class="btn btn-success" role="button" href='@ViewBag.ReturnUrl'>@InsiderTrading.Common.Common.getResource("com_btn_14010") </a>
                }
                else
                {
                    <a href="@Url.Action(view_name, controller_name, controller_paramter)" class="btn btn-success"> @InsiderTrading.Common.Common.getResource("com_btn_14010") </a>
                }
            }
            </div>
        }
        else
        {    
            //show message only if flag is set true
            if (ViewBag.ShowDownloadDocumentMsg)
            {
                <div class="alert alert-success">
                    @InsiderTrading.Common.Common.getResource("dis_lbl_17325") <br />
                    @Html.ActionLink((String)@ViewBag.DocumentName, "Download", "Document", new { nDocumentDetailsID = ViewBag.DocumentId, GUID = ViewBag.GUID, sDocumentName = ViewBag.DocumentName, sFileType = ViewBag.FileType, acid = ViewBag.UserAction }, new { @class = "" })
                </div>
            }
            
            using (Ajax.BeginForm("PartialViewDocument", "InsiderInitialDisclosure", new AjaxOptions { UpdateTargetId = "pdf" }))
            {
                @Html.AntiForgeryToken()
                <div id="pdf" class="col-lg-12">
                @{
                    Html.RenderPartial("~/Views/InsiderInitialDisclosure/PartialViewDocument.cshtml", Model, new ViewDataDictionary() { { "user_action", ViewBag.UserAction } });
                }
                </div>
                <div> &nbsp;</div>
        
                if (ViewBag.CalledFrom == "ViewAgree" || ViewBag.CalledFrom == "ViewAgree_OS")
                {
                    if (ViewBag.ViewAgreeFlag == true)
                    {
                        <div class="col-lg-12">
                            @Html.CheckBox("chkkcondition", false, new { id = "chkAccept" })
                            @Html.Label("chkAccept", @InsiderTrading.Common.Common.getResource("dis_lbl_17061"))
                                      
                        </div>
                        <div class="col-lg-2">
                            <button type="submit" class="btn btn-success" name="Accept" id="btnAccept" disabled="disabled"><i class="fa fa-save"></i>@InsiderTrading.Common.Common.getResource("dis_btn_17062")</button>
                        </div>
        
                    }
                    else if (ViewBag.ViewFlag == true)
                    {
                        <div class="col-lg-2">
                            <button type="submit" class="btn btn-success" name="Next"><i class=" fa fa-save"></i>@InsiderTrading.Common.Common.getResource("com_btn_14014")</button>
                        </div>

                    }

                    @Html.Hidden("acid", (int)ViewBag.UserAction)
                    <input type="hidden" name="authorization" value="Accept:@ViewBag.UserAction,Next:@ViewBag.UserAction" />
                }
                <div class="col-lg-2">
                @{
                    if (ViewBag.IsCalledFromReport)
                    {
                        <a class="btn btn-success" role="button" href='@ViewBag.ReturnUrl'>@InsiderTrading.Common.Common.getResource("com_btn_14010")</a>
                    }
                    else
                    {
                        <a href="@Url.Action(view_name, controller_name, controller_paramter)" class="btn btn-success"> @InsiderTrading.Common.Common.getResource("com_btn_14010") </a>
                    }
                }
                </div>
                @Html.HiddenFor(model => model.PolicyDocumentId)
                @Html.HiddenFor(model => model.CalledFrom)
        @Html.HiddenFor(model => model.RequiredModuleID)

                @Scripts.Render("~/bundles/InsiderInitialDisclosure");
            }
        }
}
</section>









