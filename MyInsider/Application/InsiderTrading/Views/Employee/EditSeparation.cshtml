@model InsiderTrading.Models.UserInfoModel
@{
    ViewBag.Title = @InsiderTrading.Common.Common.getResource("usr_ttl_11275");
    InsiderTrading.Common.LoginUserDetails objLoginUserDetails = (InsiderTrading.Common.LoginUserDetails)InsiderTrading.Common.Common.GetSessionValue(InsiderTrading.Common.ConstEnum.SessionValue.UserDetails);
}
@using (Html.BeginForm("SaveUserSeparation", "Employee", new { ReturnUrl = ViewBag.ReturnUrl,formId=105 }, FormMethod.Post, new { @id = "EditSeparationForm", @autocomplete = "off" }))
{
    @Html.AntiForgeryToken()
    <section class="content-header">
        <h1>@InsiderTrading.Common.Common.getResource("usr_ttl_11238")</h1>
    </section>
    <section class="content">
        @Html.ValidationSummary("", new Dictionary<string, object> { { "class", "alert alert-danger" }, { "id", "divValidationSummaryModal" } })
        @Html.HiddenFor(m => m.UserInfoId)
        <input type="hidden" id="MsgConfirmSeparation" value="@InsiderTrading.Common.Common.getResource("usr_msg_11434")" />
        <input type="hidden" id="MsgConfirmReActivate" value="@InsiderTrading.Common.Common.getResource("usr_msg_11435")" />
        <div class="row">
            <div class="col-lg-12">
                <div class="card panel-default">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">

                                <div class="form-group">
                                    <label>@Html.LabelFor(model => model.EmployeeId)</label>
                                    @{
                                        if (Model.EmployeeId != null)
                                        {
                                            @Html.Label(Model.EmployeeId)
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">

                                <div id="sandbox-container">
                                    @Html.LabelFor(m => m.DateOfSeparation)
                                    @{
                                        string DOBI = "";
                                        if (Model.DateOfSeparation != null)
                                        {
                                            DOBI = InsiderTrading.Common.Common.ApplyFormatting(Model.DateOfSeparation, InsiderTrading.Common.ConstEnum.DataFormatType.Date);
                                        }
                                    }
                                    <div class="input-group date" data-date-format="dd/mm/yyyy">
                                    @{
                                        if (Model.StatusCodeId == 102001)
                                        {
                                            @Html.TextBox("DateOfSeparation", DOBI, new { @class = "form-control" })
                                                                                <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                                        }
                                        else
                                        {
                                            @Html.TextBox("DateOfSeparation", DOBI, new { @class = "form-control", @disabled = "disabled" })
                                        }
                                    }
                                    </div>

                                    @Html.ValidationMessageFor(m => m.DateOfSeparation)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">

                                <div class="form-group">
                                    @Html.LabelFor(m => m.ReasonForSeparation)
                                    @if (Model.StatusCodeId == 102001)
                                    {
                                        @Html.TextBoxFor(m => m.ReasonForSeparation, new { @class = "form-control " })
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => m.ReasonForSeparation, new { @class = "form-control ", @disabled = "disabled" })
                                    }
                                    @Html.ValidationMessageFor(m => m.ReasonForSeparation)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.NoOfDaysToBeActive)
                                    @if (Model.StatusCodeId == 102001)
                                    {
                                        @Html.TextBoxFor(m => m.NoOfDaysToBeActive, new { @class = "form-control numericOnly" })
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => m.NoOfDaysToBeActive, new { @class = "form-control numericOnly", @disabled = "disabled" })
                                    }
                                    @Html.ValidationMessageFor(m => m.NoOfDaysToBeActive)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                                <div class="form-group" id="sandbox-container">
                                    @Html.LabelFor(m => m.DateOfInactivation)
                                    @{
                                        string DOI = "";
                                        if (Model.DateOfInactivation != null)
                                        {
                                            DOI = InsiderTrading.Common.Common.ApplyFormatting(Model.DateOfInactivation, InsiderTrading.Common.ConstEnum.DataFormatType.Date);
                                        }
                                    }
                                    <div class="input-group date">
                                        @Html.TextBox("txtDateOfInactivation", DOI, new { @class = "form-control", @disabled = "disabled" })
                                        @Html.HiddenFor(m => m.DateOfInactivation)
                                    </div>
                                    @Html.ValidationMessageFor(m => m.DateOfInactivation)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                                <input type="hidden" name="Save" value="" />
                                @if (Model.StatusCodeId == InsiderTrading.Common.ConstEnum.UserStatus.Active)
                                {
                                    <button type="button" class="btn btn-success" name="Save" id="btnSave" data-loading-text="Saving" autocomplete="off">@InsiderTrading.Common.Common.getResource("com_btn_14017")</button>
                                }
                                else if (Model.StatusCodeId == InsiderTrading.Common.ConstEnum.UserStatus.Inactive)
                                {
                                    if (InsiderTrading.Common.Common.CanPerform(InsiderTrading.Common.ConstEnum.UserActions.INSIDER_USERSEPARATION_REACTIVATE))
                                    {
                                        <button type="button" class="btn btn-success" name="Reactivate" id="btnReactivate" data-loading-text="Activating" autocomplete="off">@InsiderTrading.Common.Common.getResource("usr_btn_11433")</button>
                                    }
                                }
                                <button type="button" class="btn btn-success cancel" id="Cancel" name="Cancel" data-dismiss="modal"><i class="fa fa-times"></i> @InsiderTrading.Common.Common.getResource("com_btn_14011")</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
}

@Scripts.Render("~/bundles/employeeSeparation")
@Scripts.Render("~/bundles/jqueryval")

@Html.Hidden("SaveAction", Url.Action("SaveUserSeparation", "Employee", new { acid = InsiderTrading.Common.ConstEnum.UserActions.INSIDER_USERSEPARATION_CREATE, formId = 105 }))

@Html.Hidden("ReActivateUser", Url.Action("ReactivateUser", "Employee", new { acid = InsiderTrading.Common.ConstEnum.UserActions.INSIDER_USERSEPARATION_REACTIVATE, formId = 105 }))


