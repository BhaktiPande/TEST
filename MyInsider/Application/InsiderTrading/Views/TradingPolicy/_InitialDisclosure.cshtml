@model InsiderTrading.Models.TradingPolicyModel
@{
    ViewBag.Title = "_InitialDisclosure";
}

<!-- Content Header (Page header) -->
<section class="content-header">
    @Html.AntiForgeryToken()
</section>

<div class="row">
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
        <div class="form-group">
            @Html.LabelFor(m => m.DiscloInitLimit, new { @class = "normalLable" })
        </div>
    </div>
    <div class="col-lg-2 col-md-2 col-sm-3 col-xs-12">
        <div class="form-group">
            @Html.TextBoxFor(m => m.DiscloInitLimit, @InsiderTrading.Common.Common.IsTradingPolicyEdit("TextNumber", Model.ApplicableFromDate, Model.TradingPolicyStatusCodeId))
        </div>
    </div>
    <div class="col-lg-7 col-md-7 col-sm-6 col-xs-12">
        <div class="form-group">
            <label class="normalLable">@InsiderTrading.Common.Common.getResource("rul_lbl_15173")</label>
            @Html.ValidationMessageFor(m => m.DiscloInitLimit)
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
        <div class="form-group">
            @Html.LabelFor(m => m.DiscloInitDateLimit, new { @class = "normalLable" })
        </div>
    </div>
    <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12">
        <div class="form-group" id="sandbox-container">
            @{
                string DiscloInitDateLimit = "";
                if (Model.DiscloInitDateLimit != null)
                {
                    DiscloInitDateLimit = InsiderTrading.Common.Common.ApplyFormatting(Model.DiscloInitDateLimit, InsiderTrading.Common.ConstEnum.DataFormatType.Date);

                }
            }
            <div class="input-group date">
                @Html.TextBox("DiscloInitDateLimit", DiscloInitDateLimit, null, @InsiderTrading.Common.Common.IsTradingPolicyEdit("Text", Model.ApplicableFromDate, Model.TradingPolicyStatusCodeId))
                <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
            </div>
        </div>
    </div>
    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
        <div class="form-group">
            <label class="normalLable">@InsiderTrading.Common.Common.getResource("rul_lbl_15175")</label>
            @Html.ValidationMessageFor(m => m.DiscloInitDateLimit)
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-4 col-md-4 col-sm-3 col-xs-12">
        <div class="form-group">
            @Html.Label(InsiderTrading.Common.Common.getResource("rul_lbl_15181"), new { @class = "control-label text-left" })
        </div>
    </div>
    <div class="col-md-3 col-md-3 col-sm-8 col-xs-8">
        <div class="form-group">
            <label class="radio-inline" for="radios-0">
                @Html.RadioButtonFor(model => model.DiscloInitSubmitToStExByCOFlag, "True", Model.DiscloInitSubmitToStExByCOFlag == true ? @InsiderTrading.Common.Common.IsTradingPolicyEdit("Radio", Model.ApplicableFromDate, Model.TradingPolicyStatusCodeId) : @InsiderTrading.Common.Common.IsTradingPolicyEdit("RadioNull", Model.ApplicableFromDate, Model.TradingPolicyStatusCodeId)) @InsiderTrading.Common.Common.getResource("rul_lbl_15176")
            </label>
            <label class="radio-inline" for="radios-1">
                @Html.RadioButtonFor(model => model.DiscloInitSubmitToStExByCOFlag, "False", Model.DiscloInitSubmitToStExByCOFlag == false ? @InsiderTrading.Common.Common.IsTradingPolicyEdit("Radio", Model.ApplicableFromDate, Model.TradingPolicyStatusCodeId) : @InsiderTrading.Common.Common.IsTradingPolicyEdit("RadioNull", Model.ApplicableFromDate, Model.TradingPolicyStatusCodeId)) @InsiderTrading.Common.Common.getResource("rul_lbl_15177")
            </label>
        </div>
    </div>
    <div class="col-lg-5 col-md-5 col-sm-3 col-xs-12">
        <div class="form-group">
            <label style="font-style:italic" class="normalLable">@InsiderTrading.Common.Common.getResource("rul_lbl_15178")</label>
            @*<label class="radio-inline" for="radios-0">
                @Html.CheckBoxFor(model => model.DiscloInitSubmitToStExByCOSoftcopyFlag, @InsiderTrading.Common.Common.IsTradingPolicyEdit("Checkbox", Model.ApplicableFromDate, Model.TradingPolicyStatusCodeId))
                @Html.LabelFor(m => m.DiscloInitSubmitToStExByCOSoftcopyFlag, new { @class = "normalLable" })
            </label>*@
            <label class="radio-inline" for="radios-1">
                @Html.CheckBox("DiscloInitSubmitToStExByCOHardcopyFlag_disable", true, new { @disabled = "disabled", @class = "cr-check" })
                @*@Html.CheckBoxFor(model => model.DiscloInitSubmitToStExByCOHardcopyFlag, @InsiderTrading.Common.Common.IsTradingPolicyEdit("Checkbox", Model.ApplicableFromDate, Model.TradingPolicyStatusCodeId))*@
                @Html.LabelFor(m => m.DiscloInitSubmitToStExByCOHardcopyFlag, new { @class = "normalLable" })
                @Html.HiddenFor(model => model.DiscloInitSubmitToStExByCOHardcopyFlag)
            </label>
        </div>
    </div>
</div>


<script type="text/javascript">

    $(document).ready(function () {
        
        $(':radio[name="DiscloInitSubmitToStExByCOFlag"]').change(function () {
            var a = $(this).filter(':checked').val();
            if (a == 'True') {
                $(':checkbox[name="DiscloInitSubmitToStExByCOHardcopyFlag"]').prop("checked", true);
                $(':checkbox[name="DiscloInitSubmitToStExByCOSoftcopyFlag"]').prop("disabled", true);
                $(':checkbox[name="DiscloInitSubmitToStExByCOHardcopyFlag"]').prop("disabled", true);
                $(':checkbox[name="DiscloInitSubmitToStExByCOHardcopyFlag_disable"]').prop("checked", true);
                $("input[name='DiscloInitSubmitToStExByCOHardcopyFlag']").val("true");
            }
            else {

                $(':checkbox[name="DiscloInitSubmitToStExByCOSoftcopyFlag"]').attr("disabled", true);
                $(':checkbox[name="DiscloInitSubmitToStExByCOHardcopyFlag"]').attr("disabled", true);
                $(':checkbox[name="DiscloInitSubmitToStExByCOSoftcopyFlag"]').prop("checked", null);
                $(':checkbox[name="DiscloInitSubmitToStExByCOHardcopyFlag"]').prop("checked", null);
                $(':checkbox[name="DiscloInitSubmitToStExByCOHardcopyFlag_disable"]').prop("checked", null);
                $("input[name='DiscloInitSubmitToStExByCOHardcopyFlag']").val("false");
            }
        });
        $(function () {
            if ($('input:radio[name=DiscloInitSubmitToStExByCOFlag]').filter(":checked").val() == 'False') {
                $(':checkbox[name="DiscloInitSubmitToStExByCOHardcopyFlag"]').attr("disabled", true);
                $(':checkbox[name="DiscloInitSubmitToStExByCOSoftcopyFlag"]').attr("disabled", true);
                $(':checkbox[name="DiscloInitSubmitToStExByCOHardcopyFlag"]').prop("checked", null);
                $(':checkbox[name="DiscloInitSubmitToStExByCOSoftcopyFlag"]').prop("checked", null);
                $(':checkbox[name="DiscloInitSubmitToStExByCOHardcopyFlag_disable"]').prop("checked", null);
                $("input[name='DiscloInitSubmitToStExByCOHardcopyFlag']").val("false");
            } else {
                $(':checkbox[name="DiscloInitSubmitToStExByCOHardcopyFlag"]').attr("disabled", true);
                $(':checkbox[name="DiscloInitSubmitToStExByCOSoftcopyFlag"]').attr("disabled", true);
                $(':checkbox[name="DiscloInitSubmitToStExByCOHardcopyFlag"]').prop("checked", true);
                $(':checkbox[name="DiscloInitSubmitToStExByCOHardcopyFlag_disable"]').prop("checked", true);
                $("input[name='DiscloInitSubmitToStExByCOHardcopyFlag']").val("true");
            }
        });

        $(':checkbox[name="DiscloInitSubmitToStExByCOHardcopyFlag"]').change(function () {

            if ($(this).is(":checked")) {
                $(':checkbox[name="DiscloInitSubmitToStExByCOSoftcopyFlag"]').prop("checked", true);
            }
        });
    });
 </script>
