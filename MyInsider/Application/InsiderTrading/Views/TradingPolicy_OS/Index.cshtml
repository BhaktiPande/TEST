
@model InsiderTrading.Models.TradingPolicySearchViewModel
@{
    ViewBag.Title = "Trading Policy Other Security List";
}

   <!-- Content Header (Page header) -->
@*<script src="~/Scripts/TradingPolicy_OS.js"></script>*@

<section class="content-header">
    @Html.AntiForgeryToken()
    @Html.ValidationSummary("", new Dictionary<string, object> { { "class", "alert alert-danger" }, { "id", "divValidationSummaryModal" } })
    <h1>Trading Policy Other Securities</h1>

</section>
<!-- Main content -->
<section class="content  search" gridtype="@ViewBag.GridType">  

    <input type="hidden"  gridtype="@ViewBag.GridType" />

    <button type="button" data-toggle="collapse" class="btn btn-success" data-target="#filter-panel">
        <i class="fa fa-search"></i> @InsiderTrading.Common.Common.getResource("com_btn_14005")
    </button>
    <form method="post">
    <div id="filter-panel" class="collapse filter-panel">
        <br />
        <div class="col-lg-12">
            <div class="card panel-default">
                <div class="card-body">
                    <div class="row">
                        <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                            <div class="form-group">
                                @Html.Label(@InsiderTrading.Common.Common.getResource("rul_lbl_55086"))
                                @Html.TextBoxFor(m => m.PolicyName , null, new { @class = "form-control", gridtype = @ViewBag.GridType, id = "1" })
                                @Html.ValidationMessageFor(m => m.PolicyName)
                            </div>
                        </div>
                        <!-- /.col-lg-3  -->
                        <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                            <div class="form-group" id="sandbox-container">
                                @Html.Label(@InsiderTrading.Common.Common.getResource("rul_lbl_55087"))
                                @{
                                    string FromDate = "";
                                    if (Model != null)
                                    {
                                        FromDate = InsiderTrading.Common.Common.ApplyFormatting(Model.ApplicableFromDate, InsiderTrading.Common.ConstEnum.DataFormatType.Date);

                                    }
                                }
                                <div class="input-group date">
                                    @Html.TextBox("ApplicableFromDate", FromDate, null, new { @class = "form-control", gridtype = @ViewBag.GridType, id = "2" })
                                    <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                                </div>
                            </div>
                        </div>
                        <!-- /.col-lg-3  -->
                        <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">

                            <div class="form-group" id="sandbox-container">
                                @Html.Label(@InsiderTrading.Common.Common.getResource("rul_lbl_55088"))
                                @{
                                    string ToDate = "";
                                    if (Model != null)
                                    {
                                        ToDate = InsiderTrading.Common.Common.ApplyFormatting(Model.ApplicableToDate, InsiderTrading.Common.ConstEnum.DataFormatType.Date);

                                    }
                                }
                                <div class="input-group date">
                                    @Html.TextBox("ApplicableToDate", ToDate, null, new { @class = "form-control", gridtype = @ViewBag.GridType, id = "3" })
                                    <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                            <form role="form">
                                <button type="button" class="btn btn-success" id="btnSearch"><i class="fa fa-search"></i> @InsiderTrading.Common.Common.getResource("com_btn_14005")</button>
                                <button type="button" class="btn btn-success" id="btnReset" dt_name="btnReset" dt_gridtype="@ViewBag.GridType"><i class="fa fa-undo"></i> @InsiderTrading.Common.Common.getResource("com_btn_14006")</button>
                            </form>
                        </div>
                    </div>                   
                    <!-- /.row (nested) -->
                </div>
                <!-- /.panel-body -->
            </div>
            <!-- /.panel -->
        </div>
        <!-- /.col-lg-12 -->
    </div>
    </form>
    <div class="div-spacer"></div><br />
   @if (InsiderTrading.Common.Common.CanPerform(InsiderTrading.Common.ConstEnum.UserActions.TRADING_POLICY_OTHER_SECURITY_CREATE))
   {
    <div>
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
            <p>
    @{
       if (InsiderTrading.Common.Common.CanPerform(InsiderTrading.Common.ConstEnum.UserActions.TRADING_POLICY_OTHER_SECURITY_CREATE))
       {
         <a class="btn btn-success" data-toggle="modal" id="AddTradingPolicy" href='@Url.Action("Create", "TradingPolicy_OS", new { TradingPolicyId = 0, CalledFrom = "Edit", acid = InsiderTrading.Common.ConstEnum.UserActions.TRADING_POLICY_OTHER_SECURITY_CREATE })' role="button"><i class="icon icon-calender"></i>   @InsiderTrading.Common.Common.getResource("rul_btn_55085")</a>
       }
    }
            </p>
        </div>
    </div>
   }
    <div class="div-spacer"></div>

    @{Html.RenderAction("Index", "DatatableGrid", new { type = @ViewBag.GridType, btnSearch = "btnSearch", sSortCol = "0", acid = InsiderTrading.Common.ConstEnum.UserActions.TRADING_POLICY_OTHER_SECURITY_VIEW });}

    <div class="row">
        @{if (ViewBag.BackButton)
        {
            <a href="@ViewBag.BackURL">
                <button type="button" class="btn btn-success cancel showSelectedMenus" parentmenuid="43-MENU" childmenuid="43-MENU-43-MENU" id="Cancel" name="Cancel">
                    <i class="fa fa-times"></i> @InsiderTrading.Common.Common.getResource("com_btn_14011")
                </button>
            </a>
        }
}
    </div>
    <div class="div-spacer"></div><br />
    <div class="form-group">
      </div>

    <div class="div-spacer"></div>

    <div class="div-spacer"></div>
</section><!-- /.content -->
@*</div>*@<!-- /.content-wrapper -->
<script src="~/Scripts/TradingPolicy_OS.js"></script>


@*<script src="../../Scripts/TradingPolicy_OS.js"></script>*@
@*@Scripts.Render("~/bundles/TradingPolicy_OS")*@
@Scripts.Render("~/bundles/JqueryConfirm")
@if (InsiderTrading.Common.Common.CanPerform(InsiderTrading.Common.ConstEnum.UserActions.TRADING_POLICY_OTHER_SECURITY_VIEW))
{
    @Html.Hidden("View", Url.Action("Create", "TradingPolicy_OS", new { acid = InsiderTrading.Common.ConstEnum.UserActions.TRADING_POLICY_OTHER_SECURITY_VIEW, CalledFrom = "View", ParentTradingPolicy = 0 }), new { @class = "gridtypecontrol", ctrtype = "link", gridcolumntype = @ViewBag.GridType + "_usr_grd_11073", param = "{'text':'','href':'" + Url.Action("Create", "TradingPolicy_OS", new { acid = 337, CalledFrom = "View", ParentTradingPolicy = 0 }) + "&TradingPolicyId=<TradingPolicyId>','class':'display-icon icon icon-eye'}" })
}
@if (InsiderTrading.Common.Common.CanPerform(InsiderTrading.Common.ConstEnum.UserActions.TRADING_POLICY_OTHER_SECURITY_EDIT))
{
    @Html.Hidden("Edit", Url.Action("Create", "TradingPolicy_OS", new { acid = InsiderTrading.Common.ConstEnum.UserActions.TRADING_POLICY_OTHER_SECURITY_EDIT, CalledFrom = "Edit", ParentTradingPolicy = 0 }), new { @class = "gridtypecontrol", ctrtype = "link", gridcolumntype = @ViewBag.GridType + "_usr_grd_11073", param = "{'text':'','href':'" + Url.Action("Create", "TradingPolicy_OS", new { acid = 339, CalledFrom = "Edit", ParentTradingPolicy = 0 }) + "&TradingPolicyId=<TradingPolicyId>','class':'display-icon icon icon-edit btnEditTradingPolicy'}" })
}

@if (InsiderTrading.Common.Common.CanPerform(InsiderTrading.Common.ConstEnum.UserActions.TRADING_POLICY_OTHER_SECURITY_VIEW))
{
    @Html.Hidden("History", Url.Action("History", "TradingPolicy_OS", new { acid = InsiderTrading.Common.ConstEnum.UserActions.TRADING_POLICY_OTHER_SECURITY_VIEW, CalledFrom = "History" }), new { @class = "gridtypecontrol", ctrtype = "link", gridcolumntype = @ViewBag.GridType + "_usr_grd_11073", param = "{'text':'','href':'" + Url.Action("History", "TradingPolicy_OS", new { acid = 337, CalledFrom = "History" }) + "&TradingPolicyId=<TradingPolicyId>','class':'glyphicon glyphicon-header','style':'font-size:20px;'}" })
}
@if (InsiderTrading.Common.Common.CanPerform(InsiderTrading.Common.ConstEnum.UserActions.TRADING_POLICY_OTHER_SECURITY_DELETE))
{ 
    @Html.Hidden("deleteRowURL", Url.Action("DeleteFromGrid", "TradingPolicy_OS", new { acid = InsiderTrading.Common.ConstEnum.UserActions.TRADING_POLICY_OTHER_SECURITY_DELETE, CalledFrom = "Delete" }), new { @class = "gridtypecontrol", ctrtype = "link", gridtype = @ViewBag.GridType, gridcolumntype = @ViewBag.GridType + "_usr_grd_11073", param = "{'text':'', 'href':'javascript:void(0);', 'name':'deleteRow', 'queryString':'[ {ID:\"TradingPolicyId\", key:\"<TradingPolicyId>\"},{ID:\"PolicyName\", key:\"<rul_grd_55089>\"},{ID:\"formId\", key:\"85\"} ]', 'class':'display-icon icon icon-delete btnDeleteTradingPolicy'}" })
}
@Html.Hidden("RadioButtonChangeTransaction", Url.Action("RadioButtonChangeTransaction", "TradingPolicy_OS)"))


