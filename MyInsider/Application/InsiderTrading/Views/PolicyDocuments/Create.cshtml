@model InsiderTrading.Models.PolicyDocumentModel
@{
    ViewBag.Title = "Create";
}

@Styles.Render("~/content/SW360")
<script>
    $(document).ready(function () {
        $("#addCode").on('show.bs.modal', function (event) {
            
            $.ajax({
                @*@Html.ActionLink(@InsiderTrading.Common.Common.getResource("rul_lbl_15411"), "Create", "ComCode", new { CodeGroupId = InsiderTrading.Common.ConstEnum.CodeGroup.PolicyDocumentCategory + "-0", ParentCodeId = "0", frm = "pdcategory", pdid = Model.PolicyDocumentId, view = ViewBag.applicablityCalledFrom }, new { @class = "create-link" })*@
                url: "@Url.Action("Create", "ComCode", new { CodeGroupId = InsiderTrading.Common.ConstEnum.CodeGroup.PolicyDocumentCategory + "-0"})",//"../TemplateMaster/Create?TemplateMasterId=0",
                data: { ParentCodeId: "0", frm: "pdcategory", acid: @ViewBag.UserAction },
                method: "GET",
                success: function (response) {                   
                    //$("#myModal .modal-body").html('');
                    $("#addCode .modal-body").html(response);
                }
            });
        });
        $('input[name="SendEmailUpdate"]').change(function () {
            if($(this).is(":checked"))
            {
                if($(this).val() == 'Yes')
                    $('#divemailattachment').show();
                else
                    $('#divemailattachment').hide();
            }
            
        }).change();
        
    });
</script>
<!-- Content Header -->
<section class="content-header">
    <h1>@InsiderTrading.Common.Common.getResource("rul_ttl_15121")</h1>
</section>

<!-- Main content -->
<section class="content">
    <!-- Search form content -->
    <div class="row">
        <div class="col-lg-12">
            <div class="card panel-default">
                <div class="card-body">
                @using (Html.BeginForm("Create", "PolicyDocuments", new { ReturnUrl = ViewBag.ReturnUrl, formId = InsiderTrading.Common.ConstEnum.Code.frmSavePolicyDocument,acid=InsiderTrading.Common.ConstEnum.UserActions.POLICY_DOCUMENT_CREATE}, FormMethod.Post, new { @class = "", role = "", @autocomplete = "off" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary("", new Dictionary<string, object> { { "class", "alert alert-danger" }, { "id", "divValidationSummaryModal" } })
                    <div class="alert" style="display: none;" id="PolicyDocumentErrorMsg">@ViewBag.applicablityNotDefineMsg</div>
                    <!-- form field row 1 -->
                    <div class="row">
                        <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
                            <div class="form-group">
                                @{
                                    var PDN_html_attr = new Dictionary<string, object> { };
                                    PDN_html_attr.Add("class", "form-control");

                                    if (!ViewBag.isAllEdit)
                                    {
                                        PDN_html_attr.Add("readonly", "readonly");
                                    }
                                }
                                @Html.LabelFor(m => m.PolicyDocumentName)
                                @Html.TextBoxFor(m => m.PolicyDocumentName, PDN_html_attr)
                                @Html.ValidationMessageFor(m => m.PolicyDocumentName)
                            </div>
                            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-6"></div>
                        </div>
                    </div>

                    <!-- form field row 2 -->
                    <div class="row">
                        <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
                            <div class="form-group">
                                @{
                                    var DCCI_html_attr = new Dictionary<string, object> { };
                                    DCCI_html_attr.Add("class", "form-control");
                                    DCCI_html_attr.Add("id", "4");

                                    if (!ViewBag.isAllEdit)
                                    {
                                        DCCI_html_attr.Add("disabled", "disabled");
                                        @Html.HiddenFor(m => m.DocumentCategoryCodeId);
                                    }
                                }
                                @Html.LabelFor(m => m.DocumentCategoryCodeId)
                                @Html.DropDownListFor(m => m.DocumentCategoryCodeId, new SelectList(ViewBag.DocumentCategoryDropDown, "Key", "Value", ""), DCCI_html_attr)
                                @Html.ValidationMessageFor(m => m.DocumentCategoryCodeId)
                            </div>
                            @{
                                //check if user has permission to add category
                                if (InsiderTrading.Common.Common.CanPerform(InsiderTrading.Common.ConstEnum.UserActions.OTHERMASTER_COMCODE_CREATE))
                                {
                                    //if all edit is allows then only show create new category link
                                    if (ViewBag.isAllEdit)
                                    {
                                        <div class="form-group">
                                            <a href="javascript:void(0);" class="create-link" id="AT" type="button" data-toggle='modal' data-target='#addCode'>
                                                @InsiderTrading.Common.Common.getResource("rul_lbl_15411")
                                            </a>
                                        </div>
                                    }
                                }
                            }
                        </div>
                        <div id="divsubcategory" class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
                            @{
                                if (Model.DocumentCategoryCodeId != null && ViewBag.ShowDocumentSubCategoryDropDown)
                                {
                                    Html.RenderPartial("PartialSubCategory");
                                }
                            }
                        </div>

                    </div>

                   <!-- form field row 3 -->
                    <div class="row">
                        @{
                            string applicable_from_date = "";
                            if (Model.ApplicableFrom != null)
                            {
                                applicable_from_date = InsiderTrading.Common.Common.ApplyFormatting(Model.ApplicableFrom, InsiderTrading.Common.ConstEnum.DataFormatType.Date);
                            }

                            string applicable_to_date = "";
                            if (Model.ApplicableTo != null)
                            {
                                applicable_to_date = InsiderTrading.Common.Common.ApplyFormatting(Model.ApplicableTo, InsiderTrading.Common.ConstEnum.DataFormatType.Date);
                            }

                            string current_date = "";
                            if (Model.DBCurrentDate != null)
                            {
                                current_date = InsiderTrading.Common.Common.ApplyFormatting(Model.DBCurrentDate, InsiderTrading.Common.ConstEnum.DataFormatType.Date);
                            }
                        }
                        <div class="col-lg-3 col-md-4 col-sm-5 col-xs-12">
                            <div class="form-group" id="sandbox-container">
                                @{
                                    var AFD_html_attr = new Dictionary<string, object> { };
                                    AFD_html_attr.Add("class", "form-control");
                                    string AFD_cal_date_class = "date";

                                    if (!ViewBag.isAllEdit)
                                    {
                                        AFD_html_attr.Add("readonly", "readonly");
                                        AFD_cal_date_class = "";
                                    }
                                }
                                @Html.LabelFor(m => m.ApplicableFrom)
                                <div class="input-group @AFD_cal_date_class" id="applicablefromdate">
                                    @Html.TextBox("ApplicableFrom", applicable_from_date, AFD_html_attr)
                                    <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                                </div>
                                @Html.ValidationMessageFor(m => m.ApplicableFrom)
                            </div>
                        </div>
                        <div class="col-lg-3 col-md-4 col-sm-5 col-xs-12">
                            <div class="form-group" id="sandbox-container">
                                @{
                                    var ATD_html_attr = new Dictionary<string, object> { };
                                    ATD_html_attr.Add("class", "form-control");
                                    string ATD_cal_date_class = "date";

                                    if (!ViewBag.isAllEdit && ViewBag.isNoEdit)
                                    {
                                        ATD_html_attr.Add("readonly", "readonly");
                                        ATD_cal_date_class = "";
                                    }
                                }
                                @Html.LabelFor(m => m.ApplicableTo)
                                <div class="input-group @ATD_cal_date_class" id="applicabletodate">
                                    @Html.TextBox("ApplicableTo", applicable_to_date, ATD_html_attr)
                                    <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                                </div>
                                @Html.ValidationMessageFor(m => m.ApplicableTo)

                                @{
                                    if (!ViewBag.isAllEdit && ViewBag.isPartialEdit)
                                    {
                                        @Html.TextBox("DBCurrentDate", current_date, new { style = "visibility:hidden;height:0" })
                                        @Html.ValidationMessageFor(m => m.DBCurrentDate)
                                    }
                                }

                            </div>
                        </div>
                        <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
                            <div class="form-group">
                                @{
                                    var CI_html_attr = new Dictionary<string, object> { };
                                    CI_html_attr.Add("class", "form-control");

                                    if (!ViewBag.isAllEdit)
                                    {
                                        CI_html_attr.Add("disabled", "disabled");
                                        @Html.HiddenFor(m => m.CompanyId);
                                    }
                                }
                                @Html.LabelFor(m => m.CompanyId)
                                @Html.DropDownListFor(m => m.CompanyId, new SelectList(ViewBag.CompanyDropDown, "Key", "Value", ""), CI_html_attr)
                                @Html.ValidationMessageFor(m => m.CompanyId)
                            </div>
                        </div>
                    </div>

                    <!-- form field row 4 -->
                    <div class="row">
                        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                            <div class="form-group">
                                @{
                                    if (!ViewBag.isAllEdit)
                                    {
                                        @Html.Label(@InsiderTrading.Common.Common.getResource("rul_lbl_15246"))
                                        @Html.Partial("~/Views/Common/ViewMultiUploadedDocument.cshtml", Model.PolicyDocumentFile, new ViewDataDictionary() { { "user_action", ViewBag.UserAction } })
                                    }
                                    else
                                    {
                                        @Html.Label(@InsiderTrading.Common.Common.getResource("rul_lbl_15245"))
                                        @Html.Partial("~/Views/Common/MultiDocumentUpload.cshtml", Model.PolicyDocumentFile, new ViewDataDictionary() { { "user_action", ViewBag.UserAction } })
                                    }
                                }
                            </div>
                        </div>
                    </div>

                    <!-- form field row 5 -->
                    <div class="row">
                        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                            <div class="form-group">
                                @{
                                    var DVF_html_attr = new Dictionary<string, object> { };
                                    var DVAG_html_attr = new Dictionary<string, object> { };

                                    DVF_html_attr.Add("class", "");
                                    DVAG_html_attr.Add("class", "");

                                    if (!ViewBag.isAllEdit)
                                    {
                                        DVF_html_attr.Add("disabled", "disabled");
                                        DVAG_html_attr.Add("disabled", "disabled");
                                        @Html.HiddenFor(m => m.DocumentViewFlag);
                                        @Html.HiddenFor(m => m.DocumentViewAgreeFlag);
                                    }
                                }
                                @Html.Label(@InsiderTrading.Common.Common.getResource("rul_lbl_15249"))
                                @Html.CheckBoxFor(m => m.DocumentViewFlag, DVF_html_attr) @Html.LabelFor(m => m.DocumentViewFlag)
                                @Html.CheckBoxFor(m => m.DocumentViewAgreeFlag, DVAG_html_attr) @Html.LabelFor(m => m.DocumentViewAgreeFlag)
                                @Html.Label(@InsiderTrading.Common.Common.getResource("rul_lbl_15250"))
                            </div>
                        </div>
                    </div>

                    <!-- form field row 6 -->
                    <div class="row">
                        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                            <div class="form-group">
                                <div class="form-group">
                                    @{
                                        var DPD_html_attr = new Dictionary<string, object> { };

                                        DPD_html_attr.Add("class", "");

                                        if (!ViewBag.isAllEdit)
                                        {
                                            DPD_html_attr.Add("disabled", "disabled");
                                            @Html.HiddenFor(m => m.DisplayInPolicyDocument);
                                        }
                                    }
                                    @Html.LabelFor(m => m.DisplayInPolicyDocument)
                                    @Html.RadioButtonFor(m => m.DisplayInPolicyDocument, @InsiderTrading.Models.YesNo.Yes, DPD_html_attr) @InsiderTrading.Common.Common.getResource("com_lbl_14021")
                                    @Html.RadioButtonFor(m => m.DisplayInPolicyDocument, @InsiderTrading.Models.YesNo.No, DPD_html_attr) @InsiderTrading.Common.Common.getResource("com_lbl_14022")
                                    @Html.ValidationMessageFor(m => m.DisplayInPolicyDocument)
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- form field row 7 -->
                    <div class="row">
                        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                            <div class="form-group">
                                @{
                                        var SEU_html_attr = new Dictionary<string, object> { };

                                        SEU_html_attr.Add("class", "");

                                        if (!ViewBag.isAllEdit)
                                        {
                                            SEU_html_attr.Add("disabled", "disabled");
                                            @Html.HiddenFor(m => m.SendEmailUpdate);
                                        }
                                }
                                @Html.LabelFor(m => m.SendEmailUpdate)
                                @Html.RadioButtonFor(m => m.SendEmailUpdate, @InsiderTrading.Models.YesNo.Yes, SEU_html_attr) @InsiderTrading.Common.Common.getResource("com_lbl_14021")
                                @Html.RadioButtonFor(m => m.SendEmailUpdate, @InsiderTrading.Models.YesNo.No, SEU_html_attr) @InsiderTrading.Common.Common.getResource("com_lbl_14022")
                                @Html.ValidationMessageFor(m => m.SendEmailUpdate)
                            </div>
                        </div>
                    </div>

                    <!-- form field row 8 -->
                    <div class="row">
                        <div id="divemailattachment" class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                            <div class="form-group">
                                @{
                                    if (!ViewBag.isAllEdit)
                                    {
                                        @Html.Label(@InsiderTrading.Common.Common.getResource("rul_lbl_15248"))
                                        @Html.Partial("~/Views/Common/ViewMultiUploadedDocument.cshtml", Model.EmailAttachment, new ViewDataDictionary() { { "user_action", ViewBag.UserAction } })
                                    }
                                    else
                                    {
                                        @Html.Label(@InsiderTrading.Common.Common.getResource("rul_lbl_15247"))
                                        @Html.Partial("~/Views/Common/MultiDocumentUpload.cshtml", Model.EmailAttachment, new ViewDataDictionary() { {"user_action", ViewBag.UserAction} })
                                    }
                                }
                            </div>
                        </div>
                    </div>

                    <!-- form field row 9 -->
                    <div class="row">
                        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                            <div class="form-group">
                                @{
                                    var WSC_html_attr = new Dictionary<string, object> { };
                                    WSC_html_attr.Add("class", "");

                                    if (!ViewBag.allowChangeStatus)
                                    {
                                        WSC_html_attr.Add("disabled", "disabled");
                                        @Html.HiddenFor(m => m.WindowStatus);
                                    }
                                }
                                @Html.LabelFor(m => m.WindowStatus)
                                @Html.RadioButtonFor(m => m.WindowStatus, @InsiderTrading.Models.WindowStatusCode.Active, WSC_html_attr) @InsiderTrading.Common.Common.getResource("rul_lbl_15118")
                                @Html.RadioButtonFor(m => m.WindowStatus, @InsiderTrading.Models.WindowStatusCode.Deactive, WSC_html_attr) @InsiderTrading.Common.Common.getResource("rul_lbl_15119")
                                @Html.ValidationMessageFor(m => m.WindowStatus)
                            </div>
                        </div>
                    </div>

                    <!-- form buttons -->
                    <div class="row">
                        @*<div class="col-lg-12 col-md-8 col-sm-6 col-xs-12">
                        </div>*@
                        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                        @{
                            //check if to show next button or not
                            if (ViewBag.showSaveButton)
                            {
                                <button type="submit" name="Save" class="btn btn-success" id="btnSave"><i class="fa fa-save"> @InsiderTrading.Common.Common.getResource("com_btn_14017")</i></button>
                            }

                            if (ViewBag.showApplicabilityButton)
                            {
                                string applicablityCalledFrom = (ViewBag.applicablityCalledFrom == "") ? " " : ViewBag.applicablityCalledFrom;
                                <a class="btn btn-success" data-toggle="modal" href='@Url.Action("Index", "Applicability", new { acid = ViewBag.UserAction, nApplicabilityType = InsiderTrading.Common.ConstEnum.Code.PolicyDocument, nMasterID = Model.PolicyDocumentId, CalledFrom = applicablityCalledFrom })' role="button"> @InsiderTrading.Common.Common.getResource("rul_btn_15251")</a>
                            }
                        }

                            <button type="submit" name="Cancel" class="btn btn-success cancel" id="btnCancel" data-dismiss="modal"> @InsiderTrading.Common.Common.getResource("com_btn_14011")</button>
                        </div>
                    </div>

                    @Html.HiddenFor(m => m.PolicyDocumentId)
                    @Html.HiddenFor(m => m.isSaveAllowed)
                    <input type="hidden" name="authorization" value="Save:@ViewBag.UserAction" />
                }
                @Html.Hidden("SubCateogoryURL", Url.Action("SubCategory", "PolicyDocuments"))
                @Html.Hidden("edit", (bool)ViewBag.isAllEdit)
                @Html.Hidden("applicability", (bool)ViewBag.isApplicabilitySet)
                @Html.Hidden("SubCatAcid", (int)ViewBag.UserAction)
                </div>
            </div>
        </div>
    </div>
</section>

<div class="modal fade" id="addCode" tabindex="-1" role="dialog" aria-labelledby="AddCodelabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            </div>
            <div class="modal-body">
            </div>
        </div>
    </div>
</div>
@Scripts.Render("~/bundles/PolicyDocuments")
@Scripts.Render("~/bundles/CompareDateAnnotation")