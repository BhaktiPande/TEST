@model InsiderTrading.Models.PolicyDocumentSearchViewModel
@{
    ViewBag.Title = "Index";
    HtmlHelper.ClientValidationEnabled = true;
}

@Styles.Render("~/content/SW360")

<!-- Content Header -->
<section class="content-header">    
    @Html.ValidationSummary("", new Dictionary<string, object> { { "class", "alert alert-danger" }, { "id", "divValidationSummaryModal" } })
    <h1>@InsiderTrading.Common.Common.getResource("rul_ttl_15120")</h1>
</section>

<!-- Main content -->
<section class="content search" gridtype="@ViewBag.GridType">
    <!-- Search form content -->
    <button type="button" data-toggle="collapse" class="btn btn-success" data-target="#filter-panel">
        <i class="fa fa-search"></i> @InsiderTrading.Common.Common.getResource("com_btn_14005")
    </button>
    <form method="post">
    <div id="filter-panel" class="collapse filter-panel">
        <br />
        <div class="col-lg-12">
            <div class="card panel-default">
                <div class="card-body">
                    <form role="form">
                        <!-- form field row 1 -->
                        <div class="row">
                            <div class="col-lg-6 col-md-12 col-sm-12 col-xs-12">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.PolicyDocumentName)
                                    @Html.TextBoxFor(m => m.PolicyDocumentName, new { @class = "form-control", gridtype = @ViewBag.GridType, id = "1" })
                                    @Html.ValidationMessageFor(m => m.PolicyDocumentName)
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-6 col-sm-6 col-xs-12">
                                <div class="form-group" id="sandbox-container">
                                    @Html.LabelFor(m => m.ApplicableFrom)
                                    <div class="input-group date" id="applicablefromdate" data-date-format="dd/mm/yyyy">
                                        @Html.TextBox("ApplicableFrom", "", new { @class = "form-control", gridtype = @ViewBag.GridType, id = "2" })
                                        <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-6 col-sm-6 col-xs-12">
                                <div class="form-group" id="sandbox-container">
                                    @Html.LabelFor(m => m.ApplicableTo)
                                    <div class="input-group date" id="applicabletodate" data-date-format="dd/mm/yyyy">
                                        @Html.TextBox("ApplicableTo", "", new { @class = "form-control", gridtype = @ViewBag.GridType, id = "3" })
                                        <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- form field row 2 -->
                        <div class="row">
                            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.DocumentCategoryCodeId)
                                    @Html.DropDownListFor(m => m.DocumentCategoryCodeId, new SelectList(ViewBag.DocumentCategoryDropDown, "Key", "Value", ""), new { @class = "form-control", gridtype = @ViewBag.GridType, id = "4" })
                                    @Html.ValidationMessageFor(m => m.DocumentCategoryCodeId)
                                </div>
                            </div>
                            <div id="divsubcategory" class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                                @{Html.RenderPartial("PartialSubCategory");}
                            </div>
                        </div>

                        <!-- form buttons -->
                        <div class="row">
                            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                                <button type="button" class="btn btn-success" id="btnSearch"><i class="fa fa-search"> @InsiderTrading.Common.Common.getResource("com_btn_14005")</i></button>
                                <button type="button" class="btn btn-success" id="btnReset" dt_name="btnReset" dt_gridtype="@ViewBag.GridType"><i class="fa fa-undo"> @InsiderTrading.Common.Common.getResource("com_btn_14006")</i></button>
                            </div>
                        </div>
                    </form>
                    @Html.Hidden("SubCateogoryURL", Url.Action("SubCategory", "PolicyDocuments"))
                    @Html.Hidden("edit", (bool)ViewBag.isAllEdit)
                    @Html.Hidden("AllSubCatList", (bool)ViewBag.isAllSubCategoryList)
                    @Html.Hidden("SubCatAcid", InsiderTrading.Common.ConstEnum.UserActions.POLICY_DOCUMENT_CREATE)
                </div>
            </div>
        </div>
    </div>
    </form>
    <div class="div-spacer"></div><br />
    @{
        //check for which request - rules or transaction menu option - is received and set option for grid accordingly
        if (ViewBag.rules_menu_page && InsiderTrading.Common.Common.CanPerform(InsiderTrading.Common.ConstEnum.UserActions.POLICY_DOCUMENT_CREATE))
        {
            <!-- Add document button content -->
            @*<hr />*@
            <div class="row">
                @*<div class="col-lg-9 col-md-9 col-sm-9 col-xs-12">
                </div>*@
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12">
                    <a class="btn btn-success icon icon-reports" data-toggle="modal" href='@Url.Action("Create", "PolicyDocuments", new { acid = InsiderTrading.Common.ConstEnum.UserActions.POLICY_DOCUMENT_CREATE })' role="button"> @InsiderTrading.Common.Common.getResource("rul_btn_15122")</a>
                </div>
            </div>
            <div class="div-spacer"></div><br />
        }
    }

    @*<hr />*@

    <!-- Search result content -->
    @{
        //check for which request - rules or transaction menu option - is received and set option for grid accordingly
        if (ViewBag.rules_menu_page)
        {
            //set option for rule menu policy document page
            
            if (InsiderTrading.Common.Common.CanPerform(InsiderTrading.Common.ConstEnum.UserActions.POLICY_DOCUMENT_VIEW))
            {
                @Html.Hidden("View", Url.Action("Edit", "PolicyDocuments", new { acid = InsiderTrading.Common.ConstEnum.UserActions.POLICY_DOCUMENT_VIEW }), new { @class = "gridtypecontrol", ctrtype = "link", gridcolumntype = @ViewBag.GridType + "_usr_grd_11073", param = "{'text':'','href':'" + Url.Action("Edit", "PolicyDocuments", new { acid = InsiderTrading.Common.ConstEnum.UserActions.POLICY_DOCUMENT_VIEW }) + "&pdid=<PolicyDocumentId>','class':'display-icon icon icon-eye'}" })
            }
            
            if (InsiderTrading.Common.Common.CanPerform(InsiderTrading.Common.ConstEnum.UserActions.POLICY_DOCUMENT_EDIT))
            {
                @Html.Hidden("Edit", Url.Action("Edit", "PolicyDocuments", new { acid = InsiderTrading.Common.ConstEnum.UserActions.POLICY_DOCUMENT_EDIT }), new { @class = "gridtypecontrol", ctrtype = "link", gridcolumntype = @ViewBag.GridType + "_usr_grd_11073", param = "{'text':'','href':'" + Url.Action("Edit", "PolicyDocuments", new { acid = InsiderTrading.Common.ConstEnum.UserActions.POLICY_DOCUMENT_EDIT }) + "&pdid=<PolicyDocumentId>&view=e','class':'display-icon icon icon-edit'}" })
            }

            if (InsiderTrading.Common.Common.CanPerform(InsiderTrading.Common.ConstEnum.UserActions.POLICY_DOCUMENT_DELETE))
            {
                @Html.Hidden("deleteRowURL", Url.Action("Delete", "PolicyDocuments", new { acid = InsiderTrading.Common.ConstEnum.UserActions.POLICY_DOCUMENT_DELETE }), new { @class = "gridtypecontrol", ctrtype = "link", gridtype = @ViewBag.GridType, gridcolumntype = @ViewBag.GridType + "_usr_grd_11073", param = "{'text':'', 'href':'javascript:void(0);', 'name':'deleteRow', 'queryString':'[ {ID:\"pdid\", key:\"<PolicyDocumentId>\"},{ID:\"formId\", key:\"84\"} ]', 'class':'display-icon icon icon-delete btnDeletePolicyDocument'}" })
            }

            //grid list for rules policy document
            Html.RenderAction("Index", "DatatableGrid", new { type = @ViewBag.GridType, btnSearch = "btnSearch", sSortCol = "0", acid = InsiderTrading.Common.ConstEnum.UserActions.RULES_POLICY_DOCUMENT_LIST });
        }
        else
        {
            //set option for transcation menu policy document page
            
            @Html.Hidden("wstatus", (object)ViewBag.StatusList.ToString(), new { gridtype = @ViewBag.GridType, id = "6" })
            @Html.Hidden("incstats", (object)ViewBag.IncludeStatus.ToString(), new { gridtype = @ViewBag.GridType, id = "7" })
            
            if (InsiderTrading.Common.Common.CanPerform(InsiderTrading.Common.ConstEnum.UserActions.POLICY_DOCUMENT_VIEW))
            {
                @Html.Hidden("View", Url.Action("View", "PolicyDocuments", new { acid = InsiderTrading.Common.ConstEnum.UserActions.TRANSACTION_POLICY_DOCUMENT_VIEW }), new { @class = "gridtypecontrol", ctrtype = "link", gridcolumntype = @ViewBag.GridType + "_usr_grd_11073", param = "{'text':'','href':'" + Url.Action("View", "PolicyDocuments", new { acid = InsiderTrading.Common.ConstEnum.UserActions.TRANSACTION_POLICY_DOCUMENT_VIEW }) + "&pdid=<PolicyDocumentId>','class':'display-icon icon icon-eye'}" })
            }

            //grid list for transaction policy document
            Html.RenderAction("Index", "DatatableGrid", new { type = @ViewBag.GridType, btnSearch = "btnSearch", sSortCol = "0", acid = InsiderTrading.Common.ConstEnum.UserActions.POLICY_DOCUMENT_VIEW });
        }
    }
    @{if (ViewBag.BackButton)
    {
        <a href="@ViewBag.BackURL">
            <button type="button" class="btn btn-success cancel showSelectedMenus" parentmenuid="43-MENU" childmenuid="43-MENU-43-MENU" id="Cancel" name="Cancel">
                <i class="fa fa-times"></i> @InsiderTrading.Common.Common.getResource("com_btn_14011")
            </button>
        </a>
    }
    }
</section>
@Scripts.Render("~/bundles/PolicyDocuments")

