@model InsiderTrading.Models.DelegateModel
@{
    ViewBag.Title = "Delegate";
}
<script type="text/javascript">
    function DisplayErrors(errors) {
        $('#divValidationSummary').addClass('alert-danger').fadeIn('slow');
        $('#divValidationSummary').html(errors);
        setTimeout(function () {
            $('#divValidationSummary').removeClass('alert-danger').fadeOut('slow');
            $('#divValidationSummary').html("");
        }, 20000);

    }
    function ConvertDate(date){
        arr = date.split('/');
        return arr[1]+'/'+arr[0]+'/'+arr[2];
    }
    $(document).ready(function () {

        var gridtype = "@ViewBag.GridType";
        $("#1[gridtype="+gridtype+"],#2[gridtype="+gridtype+"]").change(function(){

            var i = $(this).attr('id')=="1"? "2" : "1";

            //$("#"+i+"[gridtype="+gridtype+"]").find("option").show();
            $("#"+i+"[gridtype="+gridtype+"]").find("option").removeAttr("disabled");

            if($(this).val()!="0")
                $("#"+i+"[gridtype="+gridtype+"]").find("option[value="+$(this).val()+"]").attr("disabled","disabled");
            //$("#"+i+"[gridtype="+gridtype+"]").find("option[value="+$(this).val()+"]").hide();
        });
        $("#1[gridtype="+gridtype+"]").trigger("change");
        $("#2[gridtype="+gridtype+"]").trigger("change");

        $("#btnDelegateMasterAdd").click(function () {

            var form = $('#frmDelegateMaster');
            var token = $('input[name="__RequestVerificationToken"]', form).val();

            var validator = $("#frmDelegateMaster").data("validator");
            var dataDetails = { "UserInfoIdFrom": $('#1').val(), "UserInfoIdTo": $('#2').val(), "DelegationFrom": $('#3').val(), "DelegationTo": $('#4').val(), __RequestVerificationToken: token,formId:14};// $("#frmDelegateMaster").serialize();

            if ($("#frmDelegateMaster").valid()) {
                
                $.ajax({
                    url : $("#frmDelegateMaster").attr('action'),
                    type: 'post',
                    headers:getRVToken(),
                    data:dataDetails,
                    success: function (data) {
                        if (data.status) {
                            window.location.href = $('#DelegateCreate').val() + '?acid='+data.user_action + '&UserInfoIdFrom='+dataDetails["UserInfoIdFrom"] + '&UserInfoIdTo='+dataDetails["UserInfoIdTo"]+'&DelegationFrom='+ConvertDate(dataDetails["DelegationFrom"])+'&DelegationTo='+ConvertDate(dataDetails["DelegationTo"]);//$("#frmDelegateMaster").serialize();//id='+data.msg['id'];
                        }
                        else{
                            if (data.msg['error'])
                                DisplayErrors(data.msg['error']);
                            else
                                validator.showErrors(data.msg);
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert(errorThrown);
                    }
                });
            }
        });
    });

</script>


@using (Html.BeginForm("Index", "Delegate", new { acid = InsiderTrading.Common.ConstEnum.UserActions.DELEGATION_MASTER_CREATE }, FormMethod.Post, new { @class = "", role = "form", id = "frmDelegateMaster", autocomplete = "off" }))
{
    @Html.AntiForgeryToken()
    <section class="content-header">
        @Html.ValidationSummary("", new Dictionary<string, object> { { "class", "alert alert-danger" }, { "id", "divValidationSummary" } })
        <h1>@InsiderTrading.Common.Common.getResource("usr_ttl_12050")</h1>
    </section>

    <section class="content search" gridtype="@ViewBag.GridType">
        <button type="button" data-toggle="collapse" class="btn btn-success" data-target="#filter-panel">
            <i class="fa fa-search"></i> @InsiderTrading.Common.Common.getResource("com_btn_14005")
        </button>

        <div id="filter-panel" class="collapse filter-panel in">
            <br />
            <div class="col-lg-12">
                <div class="card panel-default">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                <div class="form-group">
                                    <label>From user</label>
                                    @Html.DropDownListFor(m => m.UserInfoIdFrom, new SelectList(ViewBag.FromUserList, "Key", "Value", ""), new { @class = "form-control", gridtype = @ViewBag.GridType, id = "1" })
                                    @Html.ValidationMessageFor(m => m.UserInfoIdFrom)
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                <div class="form-group">
                                    <label>To user</label>
                                    @Html.DropDownListFor(m => m.UserInfoIdTo, new SelectList(ViewBag.ToUserList, "Key", "Value", ""), new { @class = "form-control", gridtype = @ViewBag.GridType, id = "2" })
                                    @Html.ValidationMessageFor(m => m.UserInfoIdTo)
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12">
                                <div class="form-group" id="sandbox-container">
                                    <label>From date</label>
                                    @{
                                        string FromDate = "";
                                        if (Model != null)
                                        {
                                            FromDate = InsiderTrading.Common.Common.ApplyFormatting(Model.DelegationFrom, InsiderTrading.Common.ConstEnum.DataFormatType.Date);
                                        }
                                    }
                                    <div class="input-group date">
                                        @Html.TextBoxFor(m => m.DelegationFrom, FromDate, new { @class = "form-control", id = "3", gridtype = ViewBag.GridType })
                                        <span class="input-group-addon"><i class="icon icon-calender"></i></span>
                                    </div>
                                    @Html.ValidationMessageFor(m => m.DelegationFrom)
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12">
                                <div class="form-group" id="sandbox-container">
                                    <label>To date</label>
                                    @{
                                        string ToDate = "";
                                        if (Model != null)
                                        {
                                            ToDate = InsiderTrading.Common.Common.ApplyFormatting(Model.DelegationTo, InsiderTrading.Common.ConstEnum.DataFormatType.Date);

                                        }
                                    }
                                    <div class="input-group date">
                                        @Html.TextBoxFor(m => m.DelegationTo, new { value = "@ToDate", @class = "form-control", id = "4", gridtype = ViewBag.GridType })
                                        <span class="input-group-addon"><i class="icon icon-calender"></i></span>
                                    </div>
                                    @Html.ValidationMessageFor(m => m.DelegationTo)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                                <button type="button" class="btn btn-success" id="DelegateMasterSearch"><i class="fa fa-search"></i> Search</button>
                                <button type="reset" class="btn btn-success" dt_name="btnReset" dt_gridtype="@ViewBag.GridType"><i class="fa fa-undo"></i> Reset </button>

                                @if (InsiderTrading.Common.Common.CanPerform(InsiderTrading.Common.ConstEnum.UserActions.DELEGATION_MASTER_CREATE))
                                {
                                    <button type="button" id="btnDelegateMasterAdd" class="btn btn-success"><i class="fa fa-random"></i> Add</button>
                                }
                            </div>
                        </div>
                    </div>
                    <!-- /.panel-body -->
                </div>
                <!-- /.panel -->
            </div>
            <!-- /.col-lg-12 -->
        </div>
        <div class="div-spacer"></div><br />
        <div class="alert" style="display: none;" name="ErrorMessage" gridtype="@ViewBag.GridType"></div>

        @{Html.RenderAction("Index", "DatatableGrid", new { type = @ViewBag.GridType, btnSearch = "DelegateMasterSearch", sSortCol = "0", acid = InsiderTrading.Common.ConstEnum.UserActions.DELEGATION_MASTER_VIEW });}

    </section>
}

@if (InsiderTrading.Common.Common.CanPerform(InsiderTrading.Common.ConstEnum.UserActions.DELEGATION_MASTER_EDIT))
{
    @Html.Hidden("DelegateEdit", Url.Action("Edit", "Delegate", new { acid = InsiderTrading.Common.ConstEnum.UserActions.DELEGATION_MASTER_EDIT }), new { id = "DelegateEdit", gridtype = ViewBag.GridType })
}

@if (InsiderTrading.Common.Common.CanPerform(InsiderTrading.Common.ConstEnum.UserActions.DELEGATION_MASTER_DELETE))
{
    @Html.Hidden("deleteRowURL", Url.Action("Delete", "Delegate", new { acid = InsiderTrading.Common.ConstEnum.UserActions.DELEGATION_MASTER_DELETE }), new { id = "DelegateDelete", gridtype = ViewBag.GridType })
}
@Html.Hidden("DelegateCreate", Url.Action("Create", "Delegate"), new { id = "DelegateCreate" })
@Scripts.Render("~/bundles/jqueryval")